
//*****************************************************************************
// Title:         SystemAverageInterruptionFrequencyIndex(SAIFI)
// Description:   SystemAverageInterruptionFrequencyIndex description
// Dependencies:  None
// Author:        
//
//*****************************************************************************
package com.industry.analytics.utility;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

using com.industry.utils.Bucket;
using com.industry.utils.BucketSystem;
using com.industry.utils.BucketSystemBuilder;

/* @AnalyticDefinition
{
	"name": "SAIFI",
	"description": "Calculates System Average Interruption Frequency Index in a given timewindow.",
	"group": "Utility",
	"documentation": "com/industry/analytics/utility/SAIFI.html",
	"inputChannels": [
		{
			"name": "Input_Data",
			"description": "The channel to calculate System Average Interruption Frequency Index",
			"dataProperties": ["dValue"]
		}, {
			"name": "Input_Customer",
			"description": "The channel to update total customer data",
			"dataProperties": ["dValue"]
		}
	],
	"outputChannels": [
		{
			"name": "SAIFI",
			"description": "The channel to output SAIFI within a timewindow",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "timeWindow",
			"description": "Defines the timeWindow for calculating SAIFI.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 86400,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "smoothingFactor",
			"description": "Defines the smoothing factor to be used for precision.",
			"type": "integer",
			"optional": true,
			"defaultValue": 60,
			"advanced":true,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "bySourceId",
			"description": "If defined, SAIFI calculations are partitioned based on the sourceId parameter of the input data stream.",
			"type": "Boolean",
			"defaultValue": false,
			"optional": true
		}
	]
}
*/

/**
*  The System Average Interruption Frequency Index (SAIFI) is the average number of times that a system customer experiences an outage during the year (or time period unstudy). 
*  The SAIFI Analytic computation generates a Data event containing SAIFI for each input recieved within a timewindow.
*  The SAIFI is found by divided the total number of customers interrupted by the total number of customers served. 
*  SAIFI, which is a dimensionless number , is.<br>
*
*  <b>SAIFI = ( SUM( N_i ) )/ N_t</b><br>
*  SUM = Summation function.<br>
*  N_i = Total number of customers interrupted.<br>
*  N_t = Total number of customers served.<br>
* 
*  A smoothing factor is used make result precise. Larger the number for <font face="courier" size="-1">smoothingFactor</font> better the precision.</br>
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Two input Data stream name must be provided, one for total customer data and another one for interruption.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>timeWindow</b></td><td>Defines the timeWindow for calculating SAIFI.</td>
*      <td>Stringified Decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">86400.0d (1 day)</font> </td></tr>
*  <tr><td><b>smoothingFactor</b></td><td>Defines the smoothing factor to be used for precision.</td>
*      <td>Stringified integer</td><td>Integer</td><td>False</td><td><font face="courier" size="-1">60</font> </td></tr>
*  <tr><td><b>bySourceId</b></td><td>If defined, SAIFI calculations are partitioned based on the sourceId parameter of the input data stream.</td>
*      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">false</font></td></tr>
*
*  </table></dd>
*  <dd><b>Note:</b> 1 day = 86400 seconds.</dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a SAIFI Analytic which takes input SAIFI Data events on the channel "Input_Data" and total customer data on the channel "Input_Customer"
//and calculate the moving System Average Interruption Frequency Index within timeWindow of one day (86400 seconds) with smoothingFactor of 60 for precision. 
//It publishes a Data event with the calculated value of SAIFI on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("SAIFI", ["Input_Data", "Input_Customer"], ["Output1"], {}) to "";

//Define a SAIFI Analytic which takes input SAIFI Data events on the channel "Input_Data" and total customer data on the channel "Input_Customer"
//and calculate the moving System Average Interruption Frequency Index within timeWindow of 60 seconds with smoothingFactor of 10 for precision. 
//It publishes a Data event with the calculated value of SAIFI on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("SAIFI", ["Input_Data", "Input_Customer"], ["Output"], {"timeWindow": "60.0", "smoothingFactor":"10"}) to "";
</code></dd>
*</dl>
*/

event SAIFI {
	/** This constant defines the name of the Analytic. */
	constant string NAME := "SAIFI";
	/** This constant defines the internal name used to define "all sourceIds"
	 *  used when not partitioning by sourceId.
	 *  @private */
	constant string CONST_INTERNAL_ALL_SOURCES := "__internalSourceIdWildcard";
	/** This constant defines the param name bySourceId. */
	constant string BY_SOURCE_ID := "bySourceId";
	/** This constant defines the param name timeWindow. */
	constant string TIMEWINDOW := "timeWindow";
	/**This constant defines the configuration parameter name
	 *  that specifies the smoothing factor used to calculate the SAIFI.*/
	constant string SMOOTHING_FACTOR := "smoothingFactor";
	/** This constant defines the default timewindow. 
	* @private
	*/
	constant decimal DEFAULT_TIMEWINDOW := 86400.0d;
	/** Local cache to save bySourceId. 
	* @private
	*/
	boolean _bySourceId;
	/** Local cache to save input stream. 
	* @private
	*/
	string _inputDataName;
	/** Local cache to save input total customer stream. 
	* @private
	*/
	string _inputCustomerData;
	/** Local cache to save output stream. 
	* @private
	*/
	string _outputDataName;
	/** Local cache to save timewindow value. 
	* @private
	*/
	decimal _timeWindow;
	/** Local cache to save total customer value. 
	* @private
	*/
	dictionary<string, decimal> _totalCustomers;
	/** Local cache to save smoothingFactor value. 
	* @private
	*/
	integer _smoothingFactor;
	
	/** The BucketSystem Object implementation 
	 *  @private */
	dictionary<string, BucketSystem> _bucketSystem;
	
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
*
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	
	action init(Analytic config, 
	            action<boolean, AnalyticInterface> initComplete) {
		
		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
		
	}
	
	/**Action to get timestamp from Data event
	* @private
	*/
	action getTimestamp(any dataAsAny) returns float {
		return ((<Data> dataAsAny).timestamp).toFloat();
	}
	
	/**Action to add Data event to bucket system
	* @private
	*/
	action addDataToBucket(Bucket b, any dataAsAny) returns any {
		Data d := <Data> dataAsAny;
		decimal currentValue := <decimal> b.data;
		currentValue := currentValue + d.dValue;
		return currentValue;
	}
	
	/**Init bucket
	* @private
	*/
	action initBucket(Bucket b) {
		b.data := 0.0d;
	}
	
	/**Action to calculate sum for all buckets
	* @private
	*/
	action calculateSumValues(any acculator, Bucket nextBucket) returns any {
		decimal accu := <decimal> acculator;
		decimal current := <decimal> nextBucket.data;
		
		accu := accu + current;
		
		return accu;
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration(Analytic config) returns boolean {
		boolean result := config.validateParams( NAME, 2, 1, 
		                                         [TIMEWINDOW, SMOOTHING_FACTOR, BY_SOURCE_ID], 
		                                         [Constants.DECIMAL, Constants.INTEGER, Constants.BOOLEAN], 
		                                         [false, false, false] );

		if(result) {
			_inputDataName := config.inputDataNames[0];
			_inputCustomerData := config.inputDataNames[1];
			_outputDataName := config.outputDataNames[0];
			
			_bySourceId := config.getOrBoolean(BY_SOURCE_ID, false);
			
			_timeWindow := config.getOrDecimal(TIMEWINDOW, DEFAULT_TIMEWINDOW);
			if(_timeWindow <= 0.0d) {
				log "Param "+TIMEWINDOW+" must be greater than zero. Given value : "+_timeWindow.toString() at ERROR;
				return false;
			}
			
			_smoothingFactor := config.getOrInteger(SMOOTHING_FACTOR, 60);
			if( _smoothingFactor <= 0 ) then {
				log "  Param "+SMOOTHING_FACTOR+" must be positive. Given value: " + _smoothingFactor.toString() at ERROR;
				return false;
			}
			
		}
		return result;
		
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn) {
		log "Processing " + dataIn.toString() at DEBUG;
		string sourceId := dataIn.sourceId;
		if( not _bySourceId ) then {
			sourceId := CONST_INTERNAL_ALL_SOURCES;
		} 
		

		if(dataIn.streamName = _inputCustomerData) {
			if(not _totalCustomers.hasKey(sourceId)) {
				_totalCustomers.add(sourceId, dataIn.dValue);
			} else {
				_totalCustomers[sourceId] := dataIn.dValue;
			}
		}
		
		if(dataIn.streamName = _inputDataName) {
			//initialise Bucket system for 
			if not _bucketSystem.hasKey(sourceId){
				_bucketSystem.add(sourceId, BucketSystemBuilder.create()
							        .totalSize(_timeWindow.toFloat())
							        .bucketCount(_smoothingFactor)
							        .toValue(getTimestamp)
							        .updateBucket(addDataToBucket)
							        .onBucketCreated(initBucket)
							        .build());
			}
			
			_bucketSystem[sourceId].add(dataIn);
			
			if(_totalCustomers.hasKey(sourceId) and  _totalCustomers[sourceId] > 0.0d) {
				
				decimal value := <decimal>_bucketSystem[sourceId].reduce(calculateSumValues, 0.0d);
				
				Data dataOut := dataIn.clone();
		
				dataOut.dValue := value/_totalCustomers[sourceId];
		
				dataOut.streamName := _outputDataName;
				send dataOut to dataOut.streamName;
			}
		}
		

	}
	
	/** Reset action
	* @private
	*/
	action reset() {
		
	}
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the SAIFI Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternSAIFIChannel {
	event StayAlive {}
	
	action onload() {
		string discard := SAIFI.NAME.intern();
		discard := SAIFI.CONST_INTERNAL_ALL_SOURCES.intern();
		discard := SAIFI.TIMEWINDOW.intern();
		discard := SAIFI.SMOOTHING_FACTOR.intern();
		on all StayAlive() {}
	}
}