//*****************************************************************************
// Title: Spread Analytic implementation
//
// Copyright (c) 2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.streaming_calculations;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

/* @AnalyticDefinition
{
	"name": "Spread",
	"description": "Calculates the spread of data from two input streams.",
	"group": "Streaming Calculations",
	"documentation": "com/industry/analytics/streaming_calculations/Spread.html",
	"inputChannels": [
		{
			"name": "Data1",
			"description": "The first channel used to calculate the spread across the sourceIds",
            "dataProperties": ["dValue"] 
		},{
			"name": "Data2",
			"description": "The second channel used to calculate the spread across the sourceIds",
			"dataProperties": ["dValue"] 
		}
	],
	"outputChannels": [
		{
			"name": "Spread",
			"description": "The channel to output spread data",
            "dataProperties": ["+dValue"] 
        }
	],
	"properties": [
		{
			"name": "bySourceId",
			"description": "The Spread values are calculated based on the sourceIds",
			"type": "boolean",
            "defaultValue": true,
            "optional": true,
			"advanced":true
		},{
            "name": "managementId",
            "description": "Defines the id used for management of the analytic",
            "type": "string",
            "optional": true,
            "advanced": true
        }
	]
}
*/

/**
 *  The Spread Analytic calculates a new Data event from the spread 
 *  between the latest values of Data events on two input streams. 
 *
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>Two input Data stream names must be provided. Names should not be same.</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>Only a single output Data stream name must be provided. All the
 *      params from the received input Data are copied to the spread Data,
 *      as is the sourceId.</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  <tr><td><b>bySourceId</b></td><td>If defined, the Spread values are calculated based on the <font face="courier" size="-1">sourceId</font> of the <font face="courier" size="-1">Data</font> events</td>
 *      <td><font face="courier" size="-1">"true"</font> or <font face="courier" size="-1">"false"</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
 *  
 *  </table></dd>
 *  </dl>
 *  <dl><dt><b>Example usage:</b></dt>
 <dd><code>
// Define a Spread Analytic which takes Data events on the channel "Input1" and "Input2" 
// and publishes a Data event on the output channel "Output1" with the 
// spread value calculated from events from two input streams based on source Ids . 
send com.industry.analytics.Analytic("Spread", ["Input1", "Input2"], ["Output1"], new dictionary&ltstring,string&gt ) to "";

//Define a Spread Analytic which takes Data events on the channel "Input1" and "Input2" 
//and publishes a Data event on the output channel "Output1" with the 
//spread value calculated from events from two input streams irrespective of source Ids . 
send com.industry.analytics.Analytic("Spread", ["Input1", "Input2"], ["Output2"], {"bySourceId":"false"} ) to "";
</code></dd>
 *</dl>
 */
event Spread
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Spread";
	
	/** This constant defines the configuration parameter name
	 *  that defines whether or not the Spread values will be 
	 *  partitioned by the <font face="courier" size="-1">sourceId</font>*/
	constant string BY_SOURCEID := "bySourceId";
	
	// State
	
	/** Local cached value for if we are partioning by the sourceId
	 *  @private */
	boolean _bySourceId;
	
	/** Local cached input Data name
	 *  @private */
	sequence<string> _inputDataNames;
	
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	
	/** Local cached values of most recent data on both first input streams
	 * @private
	**/
	dictionary<string/*sourceId*/, decimal> _latestValuesInput1;
	
	/** Local cached values of most recent data on both second input streams
  	 * @private
  	**/
	dictionary<string/*sourceId*/, decimal> _latestValuesInput2;
	
	/** This constant defines the internal name used to define "all sourceIds"
	 *  used when not partitioning by sourceId.
	 *  @private */
	constant string CONST_INTERNAL_ALL_SOURCES := "__internalSourceIdWildcard";

	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	

	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 2, 1, 
		                                         [BY_SOURCEID], [Constants.BOOLEAN], [false] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the input/output channel names
			_inputDataNames := config.inputDataNames;
			_outputDataName := config.outputDataNames[0];

			_bySourceId := config.getOrBoolean(BY_SOURCEID, true);
		}
		return result;
	}
	
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;

		// If we are using the optional parameter to partition based
		// on the sourceId parameter
		string sourceId := dataIn.sourceId;
		if( not _bySourceId ) then {
			sourceId := CONST_INTERNAL_ALL_SOURCES;
		} 
		
		//check if Data streamName is one of the config ones
		integer pos := _inputDataNames.indexOf(dataIn.streamName);
		
		if pos = 0 then
		{
			//Data coming from first input stream so update _latestValuesInput1
			if _latestValuesInput1.hasKey(sourceId) then
			{
				_latestValuesInput1[sourceId] := dataIn.dValue;
			} else
			{
				_latestValuesInput1.add(sourceId, dataIn.dValue);
			}
		} else if pos = 1 then 
		{
			//Data coming from second input stream so update  _latestValuesInput2
			if _latestValuesInput2.hasKey(sourceId) then
			{
				_latestValuesInput2[sourceId] := dataIn.dValue;
			} else
			{
				_latestValuesInput2.add(sourceId, dataIn.dValue);
			}
		}
		
		//if both _latestValuesInput1 and _latestValuesInput2 has values i.e both input streams has values for same sourceId
		//calculate Spread and send it
		if _latestValuesInput1.hasKey(sourceId) and _latestValuesInput2.hasKey(sourceId) then
		{
			decimal spread := _latestValuesInput1[sourceId] - _latestValuesInput2[sourceId];
			Data dataOut := dataIn.clone();
			dataOut.streamName := _outputDataName;
			dataOut.type := DataConstants.COMPUTED;
			dataOut.dValue := spread.abs();
			_analyticObject.sendData(dataOut);
		}
		
	}


	/**
	*  Optional action to reset the state of the analytic instance
	*  back to its initialisation state.
	*  This is called internally by the Analytic Object, and  
	*  should not be called directly by the Users application.
	*  If the application has created this Analytic using the 
	*  #init() action directly, then the <font face="courier" size="-1">reset</font>
	*  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	*  that was returned should be used instead.
	*
	*  @private
	*/
	action reset() {
		_latestValuesInput1.clear();
		_latestValuesInput2.clear();
	}
}



/** 
 *  This internal Monitor is used to automatically intern 
 *  any string constants that are defined that are associated
 *  with the Spread Analytic in order to improve  
 *  performance when handling strings.
 *
 *  Note: The listener that is created is required in order
 *        to keep the monitor alive between a Persistant  
 *        Correlators recovery.  Otherwise, this would be a 
 *        transient monitor, and it would not be recovered.  
 *        Which would then mean that the strings would not
 *        interned in the recovered Correlator.
 *
 *  @private
 */
monitor InternSpread {
	event StayAlive {}
	
	action onload()	{
		string discard := Spread.NAME.intern();
		discard := Spread.BY_SOURCEID.intern();
		discard := Spread.CONST_INTERNAL_ALL_SOURCES.intern();
		on all StayAlive() {}
	}
}
