//*****************************************************************************
// Title: Sum Analytic implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.streaming_calculations;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Constants;
using com.industry.analytics.TimeWeightedMovingAverage;

/** This event object is a cache of the Bucket data used
* 	in the sum calculations.  This is only used for 
*  	internal purposes, and is not exposed to the Users 
*  	application.
*	@private 
*/
event SumBucket
{
	//end timestamp for a bucket
	decimal bucketEndTimestamp;
	//start timestamp for a bucket
	decimal bucketStartTimestamp;
	//Event count in bucket
	integer eventCount;
	//sum of events in a bucket
	decimal sum;
}

/** This event object is a cache of the Moving sum for a sourceId 
* 	used in the sum calculations.  This is only used for 
*  	internal purposes, and is not exposed to the Users 
*  	application.
*	@private 
*/
event MovingSum
{
	//sequesnce of buckets to be used for calculation
	sequence<SumBucket>_bucket;
	//total sum of values within windowsize
	decimal _sum;
	//sample window size
	integer _sampleSize;
	//bucket count
	integer _bucketCount;
	//time window param
	decimal _timeWindow;
	//Bucket time window
	decimal _bucketTimeWindow;
	//Bucket event count
	integer _bucketEventCount;
	
	//Action to initialise the data and create first bucket
	action init(decimal value, decimal timestamp, decimal timeWindow, integer sampleSize, integer bucketCount)
	{	
		_timeWindow := timeWindow;
		_sampleSize := sampleSize;
		_bucketCount := bucketCount;

		SumBucket sb := new SumBucket;
		sb.sum := value;
		
		if(_timeWindow > -1.0d)
		{
			_bucketTimeWindow := timeWindow/bucketCount.toDecimal();
			//param timewondow is used for calculation
			sb.bucketEndTimestamp := timestamp;
			//create a small bucket with start TS as fraction before first event
			//This is done to make sure the event in first bucket (like other buckets) is inclusive of end TS but exclusive of startTS.
			sb.bucketStartTimestamp := timestamp.nextafter(timestamp - 1.0d);//timestamp - timestamp.nextafter(timestamp+1.0d);
			
		} else if(_sampleSize > -1)
		{
			if(sampleSize%bucketCount = 0)
			{
				_bucketEventCount := (sampleSize/bucketCount);
			} else {
				_bucketEventCount := (sampleSize/bucketCount)+1;
			}
			sb.eventCount := 1;
			
		}
		_bucket.append(sb);
		
		_sum := value;
	}
	
	//Action to update buckets and result after every data event received
	action update(decimal value, decimal timestamp)
	{
		decimal tSum := 0.0d;
		
		if(_timeWindow > -1.0d)
		{
			//Timewindow is used as param
			//create buckets (empty) if in advance
			while(_bucket[_bucket.size()-1].bucketEndTimestamp < timestamp)
			{
				SumBucket sb := new SumBucket;
				sb.sum := 0.0d;
				sb.bucketEndTimestamp := _bucket[_bucket.size()-1].bucketEndTimestamp + _bucketTimeWindow;
				sb.bucketStartTimestamp := _bucket[_bucket.size()-1].bucketEndTimestamp;
				_bucket.append(sb);
				
			}
			//traverse sequence and add data to relavent bucket
			integer i := 0;
			decimal timeDiff := timestamp - _timeWindow;
			while i < _bucket.size()
			{		
				//check if bucket is outside timewindow then remove it
				if(timeDiff >= _bucket[i].bucketEndTimestamp) 
				{
					//bucket is outside timewindow, remove it
					_bucket.remove(i);
				} else 
				{
					if(timestamp > (_bucket[i].bucketEndTimestamp - _bucketTimeWindow) and timestamp <= _bucket[i].bucketEndTimestamp)
					{
						//add event to current bucket
						_bucket[i].sum := _bucket[i].sum + value;
						break;
					} 
					i := i+1;
				}
				
			}
			//Calculate sum of buckets participating in timeWindow
			i := 0;
			while i < _bucket.size()
			{
				if not (_bucket[i].sum = 0.0d)
				{
					decimal bucketStartTime := _bucket[i].bucketEndTimestamp - _bucketTimeWindow;
					if (timestamp - _bucket[i].bucketStartTimestamp) > _timeWindow //( bucketStartTime < timeDiff ) 
					{
						//use partial sum as bucket is partially inside timeWindow		
						decimal pSum := ((_bucket[i].bucketEndTimestamp - (timestamp - _timeWindow))/_bucketTimeWindow)*_bucket[i].sum; 
						
						tSum := tSum + pSum;
						
					}else if (timestamp - _bucket[i].bucketStartTimestamp) <= _timeWindow//check if bucket is fully inside timewindow
					{
						//use full sum
						tSum := tSum + _bucket[i].sum;
					} 
				}
				
				i := i+1;
				
			}
		} else {
			//sample count used as param
			
			//if last bucket is full then create empty and add data to that
			if(_bucket[_bucket.size() -1].eventCount < _bucketEventCount)
			{
				//add data to current bucket
				_bucket[_bucket.size() -1].eventCount := _bucket[_bucket.size() -1].eventCount + 1;
				_bucket[_bucket.size() -1].sum := _bucket[_bucket.size() -1].sum + value;
				
			} else
			{
				//create a new bucket and add data
				SumBucket sb := new SumBucket;
				sb.sum := value;
				sb.eventCount := 1;
				_bucket.append(sb);
				
			}
			
			integer totalBucketEventCount := 0;
			integer i := _bucket.size() -1;
			while (i >= 0)
			{
				totalBucketEventCount := totalBucketEventCount + _bucket[i].eventCount;
				
				if (totalBucketEventCount <= _sampleSize)
				{
					//use complete Bucket sum
					tSum := tSum + _bucket[i].sum;

				} else if (totalBucketEventCount > _sampleSize and totalBucketEventCount <= (_sampleSize + _bucketEventCount))
				{
					//use partial sum 
					tSum := tSum + (((_sampleSize + _bucketEventCount) - totalBucketEventCount).toDecimal() * _bucket[i].sum / _bucket[i].eventCount.toDecimal());

				} else
				{
					//remove bucket
					_bucket.remove(i);
				}
				i := i - 1;
				
			}
			
		}

		_sum := tSum;

	}
	action getSum() returns decimal {
		return _sum ;
	}
	
}


/* @AnalyticDefinition
{
	"name": "Sum",
	"description": "Calculates sum of input data by sample count/time.",
	"group": "Streaming Calculations",
	"documentation": "com/industry/analytics/Streaming_Calculations/Sum.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to calculate sum",
			"dataProperties": ["dValue"]
		}
	],
	"outputChannels": [
		{
			"name": "Sum",
			"description": "The channel to output moving sum calculations",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "calculationType",
			"description": "Defines whether the sum calculation is based on timeWindow or count of last ‘N’ events.",
			"type": "string",
			"optional": false,
			"validValues": ["sampleCount", "timeWindow"]
		},{
			"name": "calculationValue",
			"description": "Defines the value for sampleCount or timeWindow.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 60,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "smoothingFactor",
			"description": "Defines the smoothing factor to be used for precision.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 10,
			"advanced":true,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "paramName",
			"description": "Defines the Data param to use for calculating sum.",
			"type": "string",
			"optional": true,
			"defaultValue": "dvalue",
			"validValues": ["dValue", "xValue", "yValue","zValue"]
		},{
			"name": "bySourceId",
			"description": "If defined, the Sum calculations are partitioned based on the sourceId parameter of the input data stream",
			"type": "boolean",
			"defaultValue": true,
			"optional": true,
			"advanced":true
		}
	]
}
*/


/**
*  The Sum Analytic computation generates a Data containing 
*  a moving sum calculation for each input Data received. The sum is calculated based on the number of events recieved within a time window (in seconds) or 
*  last 'N' events. 
*  A smoothing factor is used make result precise. Larger the number for <font face="courier" size="-1">smoothingFactor</font> better the precision.</br>
*  NOTE: The smoothing factor should be less than or equal to calculationValue parameter.
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>calculationType</b></td><td>Defines whether the sum calculation is based on timeWindow or count of last ‘N’ events.</td>
*      <td>Valid values are either <font face="courier" size="-1">sampleCount</font> or <font face="courier" size="-1">timeWindow</font>
		</td><td>String</td><td>True</td><td> </td></tr>
*  <tr><td><b>calculationValue</b></td><td>Defines the value for <font face="courier" size="-1">sampleCount</font> or <font face="courier" size="-1">timeWindow</font>.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">60.0d</font></td></tr>
*  <tr><td><b>smoothingFactor</b></td><td>Defines the smoothing factor to be used for precision.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">10.0d</font> </td></tr>
*  <tr><td><b>paramName</b></td><td>Defines the name of Data parameter to use for calculating Sum.</td>
*      <td>Valid values are either<font face="courier" size="-1">dValue</font> or <font face="courier" size="-1">xValue</font> or 
*			<font face="courier" size="-1">yValue</font> or <font face="courier" size="-1">zValue</font>
*		</td><td>String</td><td>False</td><td><font face="courier" size="-1">dValue</font> </td></tr>
*  <tr><td><b>bySourceId</b></td><td>If defined, the Sum calculations are partitioned based on the <font face="courier" size="-1">sourceId</font> of the <font face="courier" size="-1">Data</font> events</td>
*      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
*
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a Sum Analytic which takes Data events on the channel "Input"  
//and calculate the moving sum of last 21 Data events with smoothingFactor of 4 for precision. It publishes
//a Data event with the calculated value of Sum on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("Sum", ["Input"], ["Output"], {"calculationType": "sampleCount", "calculationValue":"21.0", "smoothingFactor":"4.0"} ) to "";

//Define a Sum Analytic which takes Data events on the channel "Input"  
//and calculate the moving sum of events received within timeWindow of 60 seconds with smoothingFactor of 4 for precision. It publishes
//a Data event with the calculated value of Sum of xValues on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("Sum", ["Input"], ["Output"], {"calculationType": "timeWindow", "calculationValue":"60.0", "smoothingFactor":"4.0", "paramName":"xValue"} ) to "";
</code></dd>
*</dl>
*/

event Sum
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Sum";
	
	/**This constant defines the configuration parameter name
	 *  that specifies the calculation type to be used to calculate the sum. Type can be either 'timeWindow' or 'sampleCount'  */
	constant string CALCULATION_TYPE := "calculationType";
	
	/**This constant defines the configuration parameter name
	 *  that specifies the calculation value to be used for calculationType to calculate the sum.*/
	constant string CALCULATION_VALUE := "calculationValue";
	
	/**This constant defines the configuration parameter name
	 *  that specifies the smoothing factor used to calculate the sum.*/
	constant string SMOOTHING_FACTOR := "smoothingFactor";
	
	/** This constant defines the configuration parameter calculationType value  */
	constant string TIMEWINDOW := "timeWindow";
	
	/** This constant defines the configuration parameter calculationType value  */
	constant string SAMPLE_COUNT := "sampleCount";
	
	/** This constant defines the configuration parameter name
	 *  that defines whether or not the drift calculation will be
	 *  partitioned by the <font face="courier" size="-1">sourceId</font>*/
	constant string BY_SOURCEID := "bySourceId";
	
	/**This constant defines the data parameter to use for calculating Sum */
	constant string PARAM_NAME := "paramName";
	
	/** This constant defines the internal name used to define "all sourceIds"
	 *  used when not partitioning by sourceId.
	 *  @private */
	constant string CONST_INTERNAL_ALL_SOURCES := "__internalSourceIdWildcard";
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	
	/** Local cached calculation type
	 *  @private */
	string _calculationType;
	
	/** Local cached calculation value
	 *  @private */
	decimal _calculationValue;
	
	/** Local cached smoothing factor
	 *  @private */
	decimal _smoothingFactor;
	
	/** Local cached value for if we are partioning by the sourceId
	 *  @private */
	boolean _bySourceId;
	
	/** Local cached parameter name
	 *  @private */
	string _paramName;
		
	/** Local cached dictionary of the sum values, keyed by
	 *  the sourceId.
	 *  @private */	
	dictionary<string /*sourceId*/, MovingSum> _mSum;
	
	/**Default value for calculationType
	@private
	*/
	constant decimal DEFAULT_VALUE := 60.0d;
	
	/**Default value for Smoothing factor
	@private
	*/
	constant decimal DEFAULT_SMOOTHING_VALUE := 10.0d;
	
	/**Default value for paramName
	@private
	*/
	constant string DEFAULT_PARAM_NAME := "dValue";
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
  *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ CALCULATION_TYPE, CALCULATION_VALUE, SMOOTHING_FACTOR, PARAM_NAME, BY_SOURCEID ], 
		                                         [ Constants.STRING, Constants.DECIMAL, Constants.DECIMAL, Constants.STRING, Constants.BOOLEAN ], 
		                                         [ true, false, false, false, false ] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the input/output channel names
			_outputDataName := config.outputDataNames[0];

			_calculationType := config.getString(CALCULATION_TYPE).toLower().ltrim().rtrim();
			//check if user has entered correct caltulation type
			if not (_calculationType = TIMEWINDOW.toLower() or _calculationType = SAMPLE_COUNT.toLower()) then
			{
				log "Parameter "+CALCULATION_TYPE+" value can be either "+TIMEWINDOW+" or "+SAMPLE_COUNT at ERROR;
				result := false;
			}
			
			//read calculation value
			_calculationValue := config.getOrDecimal(CALCULATION_VALUE, DEFAULT_VALUE);
			//If calculation type is sampleCount then check if calculation value is less than 1
			if _calculationType = SAMPLE_COUNT.toLower() and _calculationValue < 1.0d then
			{
				log "Parameter "+CALCULATION_VALUE+" must be greater than or equal to 1.0." at ERROR;
				result := false;
			} else if _calculationType = TIMEWINDOW.toLower() and _calculationValue <= 0.0d then //timewindow must be greater than 0.0
			{
				log "Parameter "+CALCULATION_VALUE+" must be greater than 0.0." at ERROR;
				result := false;
			}
			
			//read smoothing factor
			_smoothingFactor := config.getOrDecimal(SMOOTHING_FACTOR, DEFAULT_SMOOTHING_VALUE);
			
			//smoothing factor for sample count must be greater than or equal to 1
			if  _calculationType = SAMPLE_COUNT.toLower() and  _smoothingFactor < 1.0d then
			{
				log "Parameter "+SMOOTHING_FACTOR+" must be greater than or equal to 1.0." at ERROR;
				result := false;
				
			}else if _calculationType = TIMEWINDOW.toLower() and _smoothingFactor <= 0.0d then 
			{
				//smoothing factor for sample count must be greater than 0.0
				log "Parameter "+SMOOTHING_FACTOR+" must be greater than 0.0." at ERROR;
				result := false;
			}
			
			//smoothing factor must be less than calculation value. 
			//If user enters value greater than calculation value then use calculation factor
			
			if result and _smoothingFactor > _calculationValue then
			{
				log "Parameter "+SMOOTHING_FACTOR+" value "+_smoothingFactor.toString()+" is greater than "+CALCULATION_VALUE+
				". Using "+CALCULATION_VALUE+" value "+_calculationValue.toString()+" as default." at WARN;
				_smoothingFactor := _calculationValue;
			}
			
			//read paramName to find which Data param should be used for calculating Sum
			_paramName := config.getOrString(PARAM_NAME, DEFAULT_PARAM_NAME);
			
			if not (_paramName.toLower() = "dvalue" or _paramName.toLower() = "xvalue" or _paramName.toLower() = "yvalue" or _paramName.toLower() = "zvalue")
			{
				log "Value of parameter "+PARAM_NAME+" must be dValue, xValue, yValue or zValue." at ERROR;
				result := false;
			}		
			
			_bySourceId := config.getOrBoolean( BY_SOURCEID, true );
		}
		
		return result;
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;
		
		string sourceId := dataIn.sourceId;
		if( not _bySourceId ) then {
			sourceId := CONST_INTERNAL_ALL_SOURCES;
		} 
		
		if not _mSum.hasKey(sourceId) then
		{
			
			MovingSum ms := new MovingSum;
			if _calculationType = SAMPLE_COUNT.toLower() then
			{
				if _paramName.toLower() = "dvalue"
				{
					ms.init(dataIn.dValue, dataIn.timestamp,-1.0d, _calculationValue.floor(),  _smoothingFactor.floor());
					
				} else if _paramName.toLower() = "xvalue"
				{
					ms.init(dataIn.xValue.toDecimal(), dataIn.timestamp,-1.0d, _calculationValue.floor(),  _smoothingFactor.floor());
					
				} else if _paramName.toLower() = "yvalue"
				{
					ms.init(dataIn.yValue.toDecimal(), dataIn.timestamp,-1.0d, _calculationValue.floor(),  _smoothingFactor.floor());
					
				} else
				{
					ms.init(dataIn.zValue.toDecimal(), dataIn.timestamp,-1.0d, _calculationValue.floor(),  _smoothingFactor.floor());
				}

			} else 
			{
				if _paramName.toLower() = "dvalue"
				{
					ms.init(dataIn.dValue, dataIn.timestamp, _calculationValue, -1,  _smoothingFactor.floor());
					
				}else if _paramName.toLower() = "xvalue"
				{
					ms.init(dataIn.xValue.toDecimal(), dataIn.timestamp, _calculationValue, -1,  _smoothingFactor.floor());
					
				}else if _paramName.toLower() = "yvalue"
				{
					ms.init(dataIn.yValue.toDecimal(), dataIn.timestamp, _calculationValue, -1,  _smoothingFactor.floor());
					
				}else
				{
					ms.init(dataIn.zValue.toDecimal(), dataIn.timestamp, _calculationValue, -1,  _smoothingFactor.floor());
				}

			}
			
			_mSum.add(sourceId, ms);
			
		}else 
		{
			if _paramName.toLower() = "dvalue"
			{
				_mSum[sourceId].update(dataIn.dValue, dataIn.timestamp);
				
			}else if _paramName.toLower() = "xvalue"
			{
				_mSum[sourceId].update(dataIn.xValue.toDecimal(), dataIn.timestamp);
				
			}else if _paramName.toLower() = "yvalue"
			{
				_mSum[sourceId].update(dataIn.yValue.toDecimal(), dataIn.timestamp);
				
			} else
			{
				_mSum[sourceId].update(dataIn.zValue.toDecimal(), dataIn.timestamp);
			}
		}
		
		//Data event for output
		Data dataOut := dataIn.clone();
		dataOut.streamName := _outputDataName;
		dataOut.type       := DataConstants.COMPUTED;
		if _paramName.toLower() = "dvalue"
		{
			dataOut.dValue     := _mSum[sourceId].getSum();
		}else if _paramName.toLower() = "xvalue"
		{
			dataOut.xValue     := _mSum[sourceId].getSum().toFloat();
		}else if _paramName.toLower() = "yvalue"
		{
			dataOut.yValue     := _mSum[sourceId].getSum().toFloat();
		} else
		{
			dataOut.zValue     := _mSum[sourceId].getSum().toFloat();
		}

		_analyticObject.sendData(dataOut);
		
	}
	
	/**
	*  Optional action to reset the state of the analytic instance
	*  back to its initialisation state.
	*  This is called internally by the Analytic Object, and  
	*  should not be called directly by the Users application.
	*  If the application has created this Analytic using the 
	*  #init() action directly, then the <font face="courier" size="-1">reset</font>
	*  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	*  that was returned should be used instead.
	*
	*  @private
	*/
	action reset() {
		_mSum.clear();
	}
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the Sum Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternSum {
	event StayAlive {}
	
	action onload()	{
		string discard := Sum.NAME.intern();
		discard := Sum.TIMEWINDOW.intern();
		discard := Sum.SAMPLE_COUNT.intern();
		discard := Sum.CALCULATION_TYPE.intern();
		discard := Sum.CALCULATION_VALUE.intern();
		discard := Sum.SMOOTHING_FACTOR.intern();
		discard :=Sum.PARAM_NAME.intern();
		discard :=Sum.DEFAULT_PARAM_NAME.intern();
		on all StayAlive() {}
	}
}