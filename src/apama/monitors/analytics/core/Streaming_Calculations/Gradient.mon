//*****************************************************************************
// Title: Gradient Analytic implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.streaming_calculations;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

/* @AnalyticDefinition
{
	"name": "Gradient",
	"description": "Derives the gradient for the input data.",
	"group": "Streaming Calculations",
	"documentation": "com/industry/analytics/streaming_calculations/Gradient.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel receiving the data used to calculate the gradient",
            "dataProperties": ["dValue"] 
		}
	],
	"outputChannels": [
		{
			"name": "Gradient",
			"description": "The channel on which to output gradient data",
            "dataProperties": ["+dValue", "+params", "-sValue", "-xValue", "-yValue", "-zValue"] 
        }
	],
	"properties": [
		{
			"name": "bucketCount",
			"description": "Defines the number of points to use in the gradient calculation",
			"type": "integer",
            "defaultValue": 6,
            "optional": true,
            "validator": "function(value) { return value >= 2 || 'Value must be greater than or equal to 2' }"
		},{
			"name": "timeWindow",
			"description": "Defines the time window (in seconds) to use in the gradient calculation",
			"type": "decimal",
			"defaultValue": 60,
			"optional": true,
            "validator": "function(value) { return value >= 0 || 'Value must be greater than or equal to 0.0' }",
			"postfix": "(Seconds)"
		},{
			"name": "bySourceId",
			"description": "Defines whether or not the gratient calculations are partitioned by the sourceId parameter of the input data stream",
			"type": "boolean",
			"defaultValue": true,
			"optional": true,
			"advanced": true
		},{
            "name": "managementId",
            "description": "Defines the id used for management of the analytic",
            "type": "string",
            "optional": true,
            "advanced": true
        }
	]
}
*/


/** 
 *  This event object is a cache of the Bucket data used 
 *  in the gradient calculations.  This is only used for 
 *  internal purposes, and is not exposed to the Users 
 *  application.
 *  
 *  @private
 */
event Bucket {
	decimal bucketEndTimestamp;
	decimal valueTimestamp;
	decimal value;
	integer valueCount;
	dictionary<string,string> params;
}


/**
 *  The Gradient Analytic derives the gradient for the data passing through.
 *  This is achieved by setting up a defined number of buckets (default 6) 
 *  which cover a defined time window. No gradient is output until all the 
 *  buckets are in use. Within each bucket the timestamps and values are 
 *  averaged to give a single data point. The gradient is then calculated 
 *  as the least mean square between these buckets data points. The gradient
 *  is calculated at the point a Data is received which has a timestamp 
 *  beyond the time window covered by the current bucket. Once that has 
 *  been done, the oldest bucket is discarded and the triggering Data 
 *  becomes the first data point in the new bucket. This requires that at 
 *  least the size of the defined bucket count number of events are received
 *  within the defined time window.  If the time window is set to zero, then
 *  the calculation is done for every data point received, although due to the
 *  algorithm in place the gradient produced is one point behind the incoming data. 
 * 
 *  The formulae used is: <font face="courier" size="-1">
 *
 *  g = &Sigma;(t.v) - &Sigma;(t).&Sigma;(v)/n<br>
 *      --------------------<br>
 *      &Sigma;(t^2) - (&Sigma;(t))^2/n<br>
 *  </font>
 * 
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>Only a single input Data stream name must be provided.</dd>
 *  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>Only a single output Data stream name must be provided.</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  <tr><td><b>timeWindow</b></td><td>Defines the time window (in seconds) to use in the gradient calculation.</td>
 *      <td>Must be <font face="courier" size="-1">>= 0.0d</font></td><td>decimal</td><td>False</td><td>60.0d</td></tr>
 *  <tr><td><b>bucketCount</b></td><td>Defines the number of points to use in the gradient calculation.</td>
 *      <td>Must be <font face="courier" size="-1">>= 2</font></td><td>integer</td><td>False</td><td><font face="courier" size="-1">6</font></td></tr>
 *  <tr><td><b>bySourceId</b></td><td>If defined, the gradient is calculated based on the <font face="courier" size="-1">sourceId</font> of the <font face="courier" size="-1">Data</font> events</td>
 *      <td>Non-Empty String</td><td>String</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
 *  </table></dd>
 *  </dl>
 *  <dl><dt><b>Example usage:</b></dt>
 <dd><code>
// Define a Gradient Analytic which takes Data events on the channel "Input1"  
// and calculates the gradient value over a 15second timewindow. It publishes
// a Data event with the calculated gradient value on the output channel "Output1".   
send com.industry.analytics.Analytic("Gradient", ["Input1"], ["Output1"], {"timeWindow":"15.0"} ) to "";

// Define a Gradient Analytic which takes Data events on the channel "Input2"  
// and calculates the gradient value over the default 60second timewindow using 20 
// "buckets" to give a higher precision (IE 3 events per-bucket). It publishes a Data 
// events with the calculated gradient value on the output channel "Output2".   
send com.industry.analytics.Analytic("Gradient", ["Input2"], ["Output2"], {"bucketCount":"20"} ) to "";
</code></dd>
 *</dl>
 */
event Gradient {
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Gradient";
	
	/** This constant defines the configuration parameter name
	 *  that defines the number of points to use in the gradient calculation */
	constant string BUCKET_COUNT := "bucketCount";
	/** This constant defines the configuration parameter name
	 *  that defines the time window (in seconds) to use in the gradient calculation */
	constant string TIME_WINDOW := "timeWindow";
	/** This constant defines the configuration parameter name
	 *  that defines whether or not the gradient calculations will be 
	 *  partitioned by the <font face="courier" size="-1">sourceId</font>*/
	constant string BY_SOURCEID := "bySourceId";
	/** This constant defines the internal name used to define "all sourceIds"
	 *  used when not partitioning by sourceId.
	 *  @private */
	constant string CONST_INTERNAL_ALL_SOURCES := "__internalSourceIdWildcard";
	
	
	// State
	/** Local cache for the set of buckets used in the calculations, keyed by sourceId.
	 *  @private */
	dictionary<string, sequence<Bucket> > _buckets;

	// Algo specific variables
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	/** Local cached value for the bucketCount configuration parameter value
	 *  @private */
	integer _bucketCount;
	/** Local cached value for the last bucketCount value
	 *  @private */
	integer _lastBucket;
	/** Local cached value for the bucketTimeWindow configuration parameter value
	 *  @private */
	decimal _bucketTimeWindow;
	/** Local cached value for if we are partioning by the sourceId
	 *  @private */
	boolean _bySourceId;

	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	

	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
	}
	
 	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */	
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ BUCKET_COUNT, TIME_WINDOW, BY_SOURCEID ],
		      		                           	 [ Constants.INTEGER, Constants.DECIMAL, Constants.BOOLEAN ],
		                                         [ false, false, false ] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the input/output channel names
			_outputDataName := config.outputDataNames[0];
	
			_bucketCount := config.getOrInteger( BUCKET_COUNT, 6 );
			_bySourceId    := config.getOrBoolean( BY_SOURCEID, true );

			decimal timeWindow  := config.getOrDecimal( TIME_WINDOW, 60.0d );
			if( _bucketCount < 2 ) then {
				log BUCKET_COUNT + " must be at least two to calculate a gradient. Provided value: " + _bucketCount.toString() at ERROR;
				result := false;
			} else {
				_lastBucket := _bucketCount - 1;
			}
			if( timeWindow < 0.0d ) then {
				log TIME_WINDOW + " must not be negative. Provided value: " + timeWindow.toString() at ERROR;
				result := false;
			} else {
				_bucketTimeWindow := timeWindow / _bucketCount.toDecimal();
			}
		}

		return result;
	}


	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData( Data dataIn ) {
		log "Processing " + dataIn.toString() at DEBUG;

		// If we are using the optional parameter to partition based
		// on the sourceId parameter
		string sourceId := dataIn.sourceId;
		if( not _bySourceId ) then {
			sourceId := CONST_INTERNAL_ALL_SOURCES;
		} 
		
		if( not _buckets.hasKey( sourceId ) ) then {
			sequence<Bucket> b := [ Bucket( dataIn.timestamp + _bucketTimeWindow,
			                                dataIn.timestamp,
			                                dataIn.dValue,
			                                1,
			                                dataIn.params ) ];
			b.setCapacity( _bucketCount );
			_buckets[ sourceId ] := b;
			return;
		}
		
		sequence<Bucket> buckets := _buckets[ sourceId ];
		Bucket b := buckets[ buckets.size()-1 ];
		if( dataIn.timestamp >= b.bucketEndTimestamp ) then {
			_calculateGradient( dataIn, buckets );
		} else {
			b.valueCount := b.valueCount + 1;
			b.valueTimestamp := b.valueTimestamp -
								((b.valueTimestamp - dataIn.timestamp) / b.valueCount.toDecimal());
			b.value  := b.value - ((b.value - dataIn.dValue) / b.valueCount.toDecimal());
			b.params := dataIn.params;
		}
	}
	
	/** 
	 *  This helper action calculates least squares linear regression.
	 *
	 *  X(x) = sum of x
	 *  g = X(t.v) - X(t).X(v)/n
	 *      --------------------
	 *      X(t^2) - (X(t))^2/n
	 * 
	 * @private
	 */
	action _calculateGradient( Data dataIn, sequence<Bucket> buckets ) {
		if( buckets.size() = _bucketCount ) then {
			// To avoid precision loss when squaring large timestamps.
			// Gradient is set by relative distance on the axis, not absolute values.
			decimal timeAdjust := buckets[0].bucketEndTimestamp - _bucketTimeWindow;
			
			decimal tSum  := 0.0d;
			decimal vSum  := 0.0d;
			decimal tvSum := 0.0d;
			decimal ttSum := 0.0d;
			Bucket b;
			for b in buckets {
				decimal workingTimestamp := b.valueTimestamp - timeAdjust;
				tSum  := tSum + (workingTimestamp);
				vSum  := vSum + b.value;
				tvSum := tvSum + (workingTimestamp * b.value);
				ttSum := ttSum + (workingTimestamp * workingTimestamp);
			}
			decimal gradient := (tvSum - (tSum * vSum / _bucketCount.toDecimal())) /
							    (ttSum - (tSum * tSum / _bucketCount.toDecimal()));

			Data dataOut := new Data;
			dataOut.streamName := _outputDataName;
			dataOut.type       := DataConstants.COMPUTED;
			dataOut.sourceId   := dataIn.sourceId;
			dataOut.timestamp  := buckets[_lastBucket].bucketEndTimestamp;
			dataOut.dValue     := gradient;
			dataOut.params     := buckets[buckets.size()-1].params;
		
			_analyticObject.sendData(dataOut);

			buckets.remove(0);
		}
		
		if( _bucketTimeWindow <= 0.0d ) then {
			buckets.append(Bucket(dataIn.timestamp,
			                      dataIn.timestamp,
			                      dataIn.dValue,
			                      1,
			                      dataIn.params));
		} else {
			buckets.append(Bucket(buckets[buckets.size()-1].bucketEndTimestamp + _bucketTimeWindow,
			                      dataIn.timestamp,
			                      dataIn.dValue,
			                      1,
			                      dataIn.params));
		}
	}
		
	/**
	*  Optional action to reset the state of the analytic instance
	*  back to its initialisation state.
	*  This is called internally by the Analytic Object, and  
	*  should not be called directly by the Users application.
	*  If the application has created this Analytic using the 
	*  #init() action directly, then the <font face="courier" size="-1">reset</font>
	*  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	*  that was returned should be used instead.
	*
	*  @private
	*/
	action reset() {
		_buckets.clear();
	}
}


/** 
 *  This internal Monitor is used to automatically intern 
 *  any string constants that are defined that are associated
 *  with the Gradient Analytic in order to improve  
 *  performance when handling strings.
 *
 *  Note: The listener that is created is required in order
 *        to keep the monitor alive between a Persistant  
 *        Correlators recovery.  Otherwise, this would be a 
 *        transient monitor, and it would not be recovered.  
 *        Which would then mean that the strings would not
 *        interned in the recovered Correlator.
 *
 *  @private
 */
monitor InternGradient {
	event StayAlive {}
	
	action onload()	{
		string discard := Gradient.NAME.intern();
		discard := Gradient.BUCKET_COUNT.intern();
		discard := Gradient.TIME_WINDOW.intern();
		discard := Gradient.CONST_INTERNAL_ALL_SOURCES.intern();
		on all StayAlive() {}
	}
}
