//*****************************************************************************
// Title: Slicer Analytic implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.flow_manipulation;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

/* @AnalyticDefinition
{
	"name": "Slicer",
	"description": "Slices input data by count or size.",
	"group": "Flow Manipulation",
	"documentation": "com/industry/analytics/flow_manipulation/Slicer.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to slice",
			"dataProperties": ["dValue"]
		}
	],
	"outputChannels": [
		{
			"name": "Slices",
			"description": "The channel to output slices",
			"dataProperties": ["+dValue", "+params"]
		}
	],
	"properties": [
		{
			"name": "sliceType",
			"description": "Defines the behaviour of the Slicer analytic.",
			"type": "string",
			"validValues": ["sliceSize", "sliceCount"],
			"optional": false
		},{
			"name": "sliceValue",
			"description": "Defines the value of selected behaviour.",
			"type": "decimal",
			"optional": false,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "timeInterval",
			"description": "Defines the time in seconds between sending each sliced event",
			"type": "decimal",
			"optional": true,
			"defaultValue": 0,
			"validator": "function(value) { return value >= 0 || 'Must be greater than or equal to 0' }",
			"postfix": "(Seconds)"
		},{
            "name": "managementId",
            "description": "Defines the id used for management of the analytic",
            "type": "string",
            "optional": true,
            "advanced": true
        }
	]
}
*/
/**
*  The Slicer Analytic generates a set of 'X' new Data events for each incoming event, at 'Y' seconds apart and with value 'Z'.  
*  The value of 'Z' is defined by the behavior. 
*  The new events are generated every 'Y' seconds.
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.  All the
*      <font face="courier" size="-1">params</font> from the input Data are copied to the computed Data.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>sliceType</b></td><td>Defines the behaviour of the Slicer analytic. Its value can be either <font face="courier" size="-1">sliceSize</font> or <font face="courier" size="-1">sliceCount</font>.</td>
*      <td>String</td><td>String</td><td>True</td><td> </td></tr>
*  <tr><td><b>sliceValue</b></td><td>Defines the value of selected behaviour.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>True</td><td> </td></tr>
*  <tr><td><b>timeInterval</b></td><td>Defines the time to send each sliced event number of "seconds" apart.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">0.0d</font></td></tr>
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a Slicer Analytic which takes Data events on the channel "Input"  
//and generates a set of 10 Data events with value equally sliced. It publishes
//a Data event with the calculated value on the output channel "Output" every 1 second apart.   
send com.industry.analytics.Analytic("Slicer", ["Input"], ["Output"], {"sliceType":"sliceCount", "sliceValue":"10.0",  "timeInterval":"1.0"} ) to "";
</code></dd>
*</dl>
*/
event Slicer
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Slicer";
	/** This constant defines the behaviour of the Slicer analytic. The value can be 'sliceSize' or 'sliceCount'*/
	constant string SLICE_TYPE :="sliceType";
	
	/** This constant defines the value of selected slicer behaviour.*/
	constant string SLICE_VALUE :="sliceValue";
	
	/**The value slice type to compare. This will generate the sliced events with data specified by sliceValue
	* @private */
	constant string SLICE_SIZE := "sliceSize";
	
	/**The value slice type to compare. This will generate 'n' sliced events where 'n' is the number specified by sliceValue.
	* @private */
	constant string SLICE_COUNT := "sliceCount";
	
	/**This constant defines Time to send each sliced event number of "seconds" apart */
	constant string TIME_INTERVAL := "timeInterval";
	
	/** Local cache to save the value of sliceType parameter
	 *  @private */
	string _sliceType;
	
	/** Local cache to save the value of sliceValue parameter
	 *  @private */
	decimal _sliceValue;

	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	/** Local cache to save the time to send each sliced event number of "seconds" apart
	 *  @private */
	decimal _timeInterval;
	
	/**Access DataConstants
	 * @private*/
	com.industry.analytics.DataConstants constants;
	/** Local cache to save the value of remaining data when sending slices 'byValue'.
	 *  This is required to process input data from multiple sources at different time duration
	 *  @private */
	dictionary<string/*sourceId_timestamp of Data event*/, decimal> _remaining;
	/** Local cache to save the value of remaining number of events when sending slices 'byCount'.
	 *  This is required to process input data from multiple sources at different time duration
	 *  @private */
	dictionary<string/*sourceId_timestamp of Data event*/, integer> _counter;

	/** Constant to define default time interval value in seconds
	 *  @private */
	constant decimal DEFAULT_TIME_INTERVAL := 0.0d;
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      new action<>,
		                      initComplete );
	}
		
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */	
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ SLICE_TYPE, SLICE_VALUE, TIME_INTERVAL],
		      		                           	 [ Constants.STRING,  Constants.DECIMAL, Constants.DECIMAL],
		      		                             [ true, true, false ] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the input/output channel names
			_outputDataName := config.outputDataNames[0];
			
			if (not config.hasParam(SLICE_TYPE)) then //check if param SLICE_TYPE is specified
			{
				log "Parameter "+SLICE_TYPE+" must be specified." at ERROR;
				result := false;
			} else
			{
				//read value of sliceType
				_sliceType := config.getString(SLICE_TYPE).toLower().ltrim().rtrim();
				//check for valid values
				if not (_sliceType = SLICE_SIZE.toLower() or _sliceType = SLICE_COUNT.toLower()) then
				{
					log "Parameter "+SLICE_TYPE+" value should be either "+SLICE_SIZE+" or "+SLICE_COUNT at ERROR;
					result := false;
				} else //Param SLICE_TYPE is correct, now read SLICE_VALUE
				{
					if (not config.hasParam(SLICE_VALUE)) then //check if param SLICE_VALUE is specified
					{
						log "Parameter "+SLICE_VALUE+" must be specified." at ERROR;
						result := false;
					} else
					{
						_sliceValue := config.getDecimal(SLICE_VALUE);
						//if sliceType value is sliceCount then sliceValue should be >=1
						if _sliceType = SLICE_COUNT.toLower() and _sliceValue < 1.0d then
						{
							log "Parameter "+SLICE_TYPE+" value is "+SLICE_COUNT+" so "+SLICE_VALUE+" must be greater than or equal to 1." at ERROR;
							result := false;
						}
					}
				}
				
			}
			
			_timeInterval := config.getOrDecimal( TIME_INTERVAL, DEFAULT_TIME_INTERVAL );
			if( result and _timeInterval < 0.0d ) then {
				log "  Param timeInterval must be greater than or equal to 0." at ERROR;
				result := false;
			}
		} else {
			result := false;
		}
		
		return result;
	}
	
	action processData(Data dataIn)
	{
		//check if _behaviour is byValue or byCount
		if _sliceType = SLICE_SIZE.toLower() then {
			decimal _updatedSliceValue := _sliceValue;
			//if data.dValue is positive number and sliceValue is negative, then change slice value to positive otherwise it will be infinite loop
			if(dataIn.dValue > 0.0d and _updatedSliceValue < 0.0d ) then
			{
				_updatedSliceValue := _updatedSliceValue.abs();
			} else if (dataIn.dValue < 0.0d and _updatedSliceValue > 0.0d ) then //data.dValue is negative number and sliceValue is positive, then change slice value to negative
			{
				_updatedSliceValue := _updatedSliceValue * -1.0d;
			}
			//slice events by value
			_remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()] := dataIn.dValue;
			
			if _timeInterval > 0.0d then
			{
				listener vListener := on all wait( _timeInterval.toFloat() ) {
					
					_updateRemainingAndSend(dataIn, _updatedSliceValue);
					
					if _remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()] = 0.0d then {
						vListener.quit();
					}
				}
			} else
			{
				while _remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()] > 0.0d
				{
					_updateRemainingAndSend(dataIn, _updatedSliceValue);
				}
			}
			
		} else if _sliceType = SLICE_COUNT.toLower() then /*byCount*/ {
			decimal _newValue := dataIn.dValue/_sliceValue;
			//using sourceId and event timestamp as Key to handle cases when data event rate (per sec) > _timeInterval
			_counter[dataIn.sourceId+"_"+dataIn.timestamp.toString()] := 0;
			if _timeInterval > 0.0d then
			{
				//create wait listener and send events after every timeInterval
				listener sListener := on all wait ( _timeInterval.toFloat() ) {
					if _counter[dataIn.sourceId+"_"+dataIn.timestamp.toString()] < _sliceValue.floor() then{
						
						_updateCounterAndSend(dataIn, _newValue);
						
					} else {
						sListener.quit();
					}
				}
			} else //timeInterval is 0, send data immediately 
			{
				while _counter[dataIn.sourceId+"_"+dataIn.timestamp.toString()] < _sliceValue.floor() 
				{
					_updateCounterAndSend(dataIn, _newValue);
				}
			}
					
		}
	}
	
	/**
	 *  This action is called internally and should not be called
	 *  directly by the Users application.
	 *
	 *  @private
	 */	
	action _updateRemainingAndSend(Data dataIn, decimal sValue)
	{
		
		//check if remaining is greater than value
		if _remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()] >= sValue then {
			_sendSlice(dataIn, sValue);
			_remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()] := _remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()] - sValue;
		} else {//last slice
			_sendSlice(dataIn, _remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()]);
			_remaining[dataIn.sourceId+"_"+dataIn.timestamp.toString()]:= 0.0d;
		}
	}
	
	
	/**
	 *  This action is called internally and should not be called
	 *  directly by the Users application.
	 *
	 *  @private
	 */	
	action _updateCounterAndSend(Data dataIn, decimal value)
	{
		_sendSlice(dataIn, value);
		_counter[dataIn.sourceId+"_"+dataIn.timestamp.toString()] := _counter[dataIn.sourceId+"_"+dataIn.timestamp.toString()] + 1;
	}
	
	/**
	 *  This action is called internally and should not be called
	 *  directly by the Users application.
	 *
	 *  @private
	 */	
	action _sendSlice(Data dataIn, decimal newValue)
	{
		Data dataOut := dataIn.clone();
		dataOut.streamName := _outputDataName;
		dataOut.type := constants.COMPUTED;
		dataOut.dValue       := newValue;
		dataOut.timestamp := currentTime.toDecimal() ;
		
		if _sliceType = SLICE_SIZE.toLower() then
		{
			dataOut.params[SLICE_TYPE] := SLICE_SIZE.toLower();
		} else if _sliceType = SLICE_COUNT.toLower() then {
			dataOut.params[SLICE_TYPE] := SLICE_COUNT.toLower();
		}
		dataOut.params[SLICE_VALUE] := _sliceValue.toString();
		dataOut.params[TIME_INTERVAL] := _timeInterval.toString();
		_analyticObject.sendData(dataOut);
	}
	
	
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the Slicer Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternSlicer {
	event StayAlive {}
	
	action onload()	{
		string discard := Slicer.NAME.intern();
		discard := Slicer.SLICE_TYPE.intern();
		discard := Slicer.SLICE_VALUE.intern();
		discard := Slicer.SLICE_SIZE.intern();
		discard := Slicer.SLICE_COUNT.intern();
		discard := Slicer.TIME_INTERVAL.intern();
		on all StayAlive() {}
	}
}
