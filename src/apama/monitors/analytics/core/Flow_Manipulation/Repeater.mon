//*****************************************************************************
// Title: Repeater Analytic implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.flow_manipulation;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

/* @AnalyticDefinition
{
	"name": "Repeater",
	"description": "Repeats Data events based on a defined time interval",
	"group": "Flow Manipulation",
	"documentation": "com/industry/analytics/flow_manipulation/Repeater.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channels to repeat"
		}
	],
	"outputChannels": [
		{
			"name": "Repeated",
			"description": "The repeated data channel",
			"dataProperties": ["+params"]
		}
	],
	"properties": [
		{
			"name": "interval",
			"description": "The time interval to repeat the data after unless an update was received",
			"type": "decimal",
			"optional": true,
			"defaultValue": 60,
			"validator": "function(value) { return value > 0 || 'Value must be greater than 0.0' }"
		},{
			"name": "bySourceId",
			"description": "If true, the Data event to be repeated is partitioned based on the sourceId parameter of the input data stream",
			"type": "boolean",
			"defaultValue": true,
			"optional": true,
			"advanced":true
		}
	]
}
*/
/**
 *  The Repeater Analytic takes <font face="courier" size="-1">Data</font> events
 *  from the input channel and repeats the Data received if an update was not received 
 *  within the defined time interval.
 * 
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>Only a single input Data stream name must be provided.</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>Only a single output Data stream name must be provided.</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  <tr><td><b>interval</b></td><td>The time interval to repeat the data after unless an update was received</td>
 *      <td>Stringified decimal <font face="courier" size="-1">>0.0d</font></td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">60.0d</font></td></tr>
 *  <tr><td><b>bySourceId</b></td><td>If true, the Data event to be repeated is partitioned based on the <font face="courier" size="-1">sourceId</font> parameter of the input data stream</td>
 *      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
 *  </table></dd>
 *  </dl>
 *  <dl><dt><b>Example usage:</b></dt>
 <dd><code>
// Define a Repeater Analytic which takes Data events from input channel ("Input1")
// and republishes the events to a single output channel ("Output1") if another update 
// for the same sourceId was not received within the default time interval
send com.industry.analytics.Analytic("Repeater", ["Input1"], ["Output1"], new dictionary&ltstring,string&gt ) to "";

// Define a Repeater Analytic which takes Data events from input channel ("Input2")
// and republishes the events to a single output channel ("Output2") if another update 
// for the same sourceId was not received within the defined time interval of 20seconds
send com.industry.analytics.Analytic("Repeater", ["Input2"], ["Output2"], {"interval":"20.0d"} ) to "";
</code></dd>
 *</dl>
 */ 
event Repeater {	
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Repeater";

	/** This constant defines the configuration parameter name
	 *  for defining the repeat interval. */
	constant string TIME_INTERVAL := "interval";

	/** This constant defines the configuration parameter name
	 *  that defines whether or not the events received will be
	 *  partitioned by the <font face="courier" size="-1">sourceId</font>*/
	constant string BY_SOURCEID := "bySourceId";
	
	/** This constant defines the parameter name that is added to the 
	 *  repeatedly generated events. This will not be added to Data
	 *  events that are received within the time window */
	constant string REPEATED_PARAM := "repeated";
	
	/** Local cached time interval configuration parameter name
	 *  @private */
	decimal _interval;
	/** Local cached value for if we are partioning by the sourceId
	 *  @private */
	boolean _bySourceId;
	
	// Algo specific variables
	/** Local cached input Data name
	 *  @private */
	string _inputDataName;
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;

	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	

	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete) {
		
		if( not _validateConfiguration( config ) ) then {
			initComplete(false, new AnalyticInterface);
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      new action<>,
		                      initComplete );
	}
	
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ TIME_INTERVAL, BY_SOURCEID ], 
												 [ Constants.DECIMAL, Constants.BOOLEAN ],
												 [ false, false ] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the Input/Output channel names
			_inputDataName  := config.inputDataNames[0];
			_outputDataName := config.outputDataNames[0];
			
			// Cache the configuration
			_interval   := config.getOrDecimal( TIME_INTERVAL, 60.0d );
			if( _interval <= 0.0d ) then {
				log "  Param " + TIME_INTERVAL +" must be positive. Given value: " + _interval.toString() at ERROR;
				result := false;
			}
			_bySourceId := config.getOrBoolean( BY_SOURCEID, true );
		} 

		return result;
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData( Data dIn ) {
		log "Processing " + dIn.toString() at DEBUG;
		
		// Re-send the Data on the output channel defined.
		Data dOut := dIn.clone();
		dOut.streamName := _outputDataName;
		
		// Check if we are partitioning by the sourceId
		if( _bySourceId ) then {
			// Setup a wait listener for the defined time interval
			// and tear it down if another Data event for the same
			// input stream and sourceId are received
			on all wait( _interval.toFloat() ) 
			and not Data( streamName=_inputDataName, sourceId=dIn.sourceId ) {
				// Send the Data to the output channel
				dOut.timestamp := currentTime.toDecimal();
				dOut.params.add( "repeated", "true");
				_analyticObject.sendData( dOut );
			}
		} else {
			// Setup a wait listener for the defined time interval
			// and tear it down if another Data event for the same
			// input stream is received
			on all wait( _interval.toFloat() ) 
			and not Data( streamName=_inputDataName ) {
				// Send the Data to the output channel
				dOut.timestamp := currentTime.toDecimal();
				dOut.params.add( "repeated", "true");
				_analyticObject.sendData( dOut );
			}
		}

		// Send the Data to the output channel
		_analyticObject.sendData( dOut );
	}
}


/** 
 *  This internal Monitor is used to automatically intern 
 *  any string constants that are defined that are associated
 *  with the Repeater Analytic in order to improve  
 *  performance when handling strings.
 *
 *  Note: The listener that is created is required in order
 *        to keep the monitor alive between a Persistant  
 *        Correlators recovery.  Otherwise, this would be a 
 *        transient monitor, and it would not be recovered.  
 *        Which would then mean that the strings would not
 *        interned in the recovered Correlator.
 *
 *  @private
 */
monitor InternRepeaterChannel {
	event StayAlive {}
	
	action onload() {
		string discard := Repeater.NAME.intern();
		discard := Repeater.BY_SOURCEID.intern();
		discard := Repeater.TIME_INTERVAL.intern();
		on all StayAlive() {}
	}
}
