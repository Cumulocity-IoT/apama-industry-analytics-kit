//*****************************************************************************
// Title: Speed Analytic implementation
//
// Copyright (c) 2016-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.geolocation;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Constants;
using com.industry.analytics.GeoUtil;

/**Event to save location data with timestamp
* @private
**/
event Location
{
	decimal latitude;
	decimal longitude;
	decimal timestamp;
	
	action reset() {
		latitude := -999.0d;
		longitude := -999.0d;
		timestamp := 0.0d;
	}
}

/* @AnalyticDefinition
{
	"name": "Speed",
	"description": "Calculates Speed depending on location params and timestamp.",
	"group": "GeoLocation",
	"documentation": "com/industry/analytics/geolocation/Speed.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to calculate speed",
			"dataProperties": ["xValue", "yValue"]
		}
	],
	"outputChannels": [
		{
			"name": "Speed",
			"description": "The channel to output speed calculations",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "speedUnit",
			"description": "Defines the unit to use for calculating speed.",
			"type": "string",
			"optional": true,
			"defaultValue": "MPH",
			"validValues": ["KMPH", "MPH"]
		}
	]
}
*/

/**
*  The Speed Analytic computation generates a Data containing 
*  a speed calculation for each input Data received. The speed is calculated by comparing previous location Data with recent lacation Data event. 
*  
*  The distance is calculated using Haversine formula. </br>
*   a = square(sin(((lat2-lat1)in radians)/2)) + cos(Lat1 in radians) * cos(Lat2 in radians) * square(sin(((lon2-lon1) in radians)/2))</br>
*	c = 2* atan2(sqrt(a), sqrt(1-a))</br>
*	d = radius of earth * c </br>
*	S = d/t
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>speedUnit</b></td><td>Defines the units to use for calculating speed.</td>
*      <td>Valid values are <font face="courier" size="-1"> KMPH</font> or <font face="courier" size="-1">MPH</font></td><td>String</td><td>False</td><td><font face="courier" size="-1">MPH</font></td></tr>
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a Speed Analytic which takes Data events on the channel "Input"
//and calculate the Speed in MPH. It publishes a Data event with the calculated
//value of Speed on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("Speed", ["Input"], ["Output"], {} ) to "";

//Define a Speed Analytic which takes Data events on the channel "Input"  
//and calculate the moving Speed in KMPH. It publishes a Data event with the calculated
//value of Speed on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("Speed", ["Input"], ["Output"], {"speedUnits": "KMPH"} ) to "";
</code></dd>
*</dl>
*/
event Speed
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Speed";
	/** This constant defines the name of parameter speedUnits. */
	constant string SPEED_UNIT := "speedUnit";

	/**Local cache to save speedUnits parameter value
	* @private
	**/
	string _speedUnits;
	/**Constant to save the value of speed units in Km per hour
	* @private
	**/
	constant string KMPH := "KMPH";
	/**Constant to save the value of distance units in Miles per hour
	* @private
	**/
	constant string MPH := "MPH";
	
	/**Save previous location information for speed calculation
	*@private
	**/
	Location prev;
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	GeoUtil geoUtil;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
 *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if ( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
		
		geoUtil := new GeoUtil;
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ SPEED_UNIT], 
		                                         [ Constants.STRING], 
		                                         [ false] );
		
		
		if(result) then {
			//Cache the input/output channel names
			_outputDataName := config.outputDataNames[0];
			
			_speedUnits := config.getOrString(SPEED_UNIT, MPH);
			if not (_speedUnits.toLower() = MPH.toLower() or _speedUnits.toLower() = KMPH.toLower()) then {
				log "Param "+SPEED_UNIT+" must be either "+MPH+" or "+KMPH+". Value specified is "+_speedUnits at ERROR;
				result := false;
			}
	    } else {
			result := false;
		}
		
		//set previous location to invalid value
		prev := new Location;
		prev.latitude  := -999.0d;
		prev.longitude := -999.0d;
		prev.timestamp := 0.0d;
		
		return result;
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;
		
		if( dataIn.xValue > 90.0 or dataIn.xValue < -90.0 
		or  dataIn.yValue > 180.0 or dataIn.yValue < -180.0 ) then {
			log "Incorrect values for latitude/longitude in data." at WARN;
		} else {
			//check if prev location is present then calculate distance and speed
			if not (prev.latitude = -999.0d or prev.longitude = -999.0d) then {
				decimal dist;
				if (_speedUnits.toLower() = KMPH.toLower()) {
					dist := geoUtil.haversineDistanceInKM(dataIn.xValue.toDecimal(), dataIn.yValue.toDecimal(), prev.latitude, prev.longitude);
					log "Distance in Miles is " + dist.toString() at INFO;
				} else {
					dist := geoUtil.haversineDistanceInMiles(dataIn.xValue.toDecimal(), dataIn.yValue.toDecimal(), prev.latitude, prev.longitude);
					log "Distance in Km is " + dist.toString() at INFO;
				}
				
				decimal speed := dist / ((dataIn.timestamp - prev.timestamp)/3600.0d);
				
				log "speed is " + speed.toString() at INFO;
				
				Data dataOut := new Data;
				dataOut.streamName := _outputDataName;
				dataOut.type       := DataConstants.COMPUTED;
				dataOut.sourceId   := dataIn.sourceId;
				dataOut.timestamp  := currentTime.toDecimal();
				dataOut.dValue     := speed;
				
				_analyticObject.sendData(dataOut);
			}
			prev.latitude  := dataIn.xValue.toDecimal();
			prev.longitude := dataIn.yValue.toDecimal();
			prev.timestamp := dataIn.timestamp;
		}
	}
	
	/**
	*  Optional action to reset the state of the analytic instance
	*  back to its initialisation state.
	*  This is called internally by the Analytic Object, and  
	*  should not be called directly by the Users application.
	*  If the application has created this Analytic using the 
	*  #init() action directly, then the <font face="courier" size="-1">reset</font>
	*  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	*  that was returned should be used instead.
	*
	*  @private
	*/
	action reset() {
		prev.reset();
	}
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the Distance Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternSpeed {
	event StayAlive {}
	
	action onload()	{
		string discard := Speed.NAME.intern();
		discard := Speed.SPEED_UNIT.intern();
		discard := Speed.KMPH.intern();
		discard := Speed.MPH.intern();
		on all StayAlive() {}
	}
}