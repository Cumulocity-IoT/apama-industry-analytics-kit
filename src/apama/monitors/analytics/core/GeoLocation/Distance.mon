//*****************************************************************************
// Title: Distance Analytic implementation
//
// Copyright (c) 2016-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.geolocation;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Constants;
using com.industry.analytics.GeoUtil;

/* @AnalyticDefinition
{
	"name": "Distance",
	"description": "Calculates Distance between two lat/lon points.",
	"group": "GeoLocation",
	"documentation": "com/industry/analytics/geolocation/Distance.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to calculate distance",
			"dataProperties": ["xValue", "yValue"]
		}
	],
	"outputChannels": [
		{
			"name": "Distance",
			"description": "The channel to output distance calculations",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "latitude",
			"description": "Defines the latitude of fixed point.",
			"type": "float",
			"optional": false,
			"validator": "function(value) { return value >=-90.0 or value <=90.0 || 'Must be between -90.0 and 90.0.' }"
		},{
			"name": "longitude",
			"description": "Defines the longitude of fixed point.",
			"type": "float",
			"optional": false,
			"validator": "function(value) { return value >=-1800.0 or value <=180.0 || 'Must be between -180.0 and 180.0.' }"
		},{
			"name": "distanceUnit",
			"description": "Defines the unit to use for calculating Distance.",
			"type": "string",
			"optional": true,
			"defaultValue": "MILES",
			"validValues": ["KMS", "MILES"]
		}
	]
}
*/

/**
*  The Distance Analytic computation generates a Data containing 
*  a Distance calculation for each input Data received from a point. The Distance is calculated by comparing a fixed location point with recent lacation Data event. 
*  
*  The distance is calculated using Haversine formula. </br>
*   a = square(sin(((lat2-lat1)in radians)/2)) + cos(Lat1 in radians) * cos(Lat2 in radians) * square(sin(((lon2-lon1) in radians)/2))</br>
*	c = 2* atan2(sqrt(a), sqrt(1-a))</br>
*	d = radius of earth * c </br>
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>latitude</b></td><td>Defines the latitude of fixed point.</td>
*      <td><font face="courier" size="-1">Between -90.0 and +90.0 </font> </td><td>Decimal</td><td>True</td><td> </td></tr>
*  <tr><td><b>longitude</b></td><td>Defines the longitude of fixed point.</td>
*      <td><font face="courier" size="-1">Between -180.0 and +180.0 </font> </td><td>Decimal</td><td>True</td><td> </td></tr>
*  <tr><td><b>DistanceUnits</b></td><td>Defines the units to use for calculating Distance.</td>
*      <td>Valid values are <font face="courier" size="-1"> KMS</font> or <font face="courier" size="-1">MILES</font></td><td>String</td><td>False</td><td><font face="courier" size="-1">MILES</font></td></tr>
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a Distance Analytic which takes Data events on the channel "Input"  
//and calculate the Distance in Miles. It publishes
//a Data event with the calculated value of Distance on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("Distance", ["Input"], ["Output"], {"latitude":"52.087653486", "longitude":"0.7462948756"} ) to "";

//Define a Distance Analytic which takes Data events on the channel "Input"  
//and calculate the moving Distance in KM. It publishes
//a Data event with the calculated value of Distance on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("Distance", ["Input"], ["Output"], {"latitude":"52.087653486", "longitude":"0.7462948756","distanceUnits": "KMPH"} ) to "";
</code></dd>
*</dl>
*/

event Distance
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Distance";
	/** This constant defines the name of parameter latitude. */
	constant string LATITUDE :="latitude";
	/** This constant defines the name of parameter longitude. */
	constant string LONGITUDE := "longitude";
	/** This constant defines the name of parameter distanceUnits. */
	constant string DISTANCE_UNIT := "distanceUnit";
	
	/**Local cache defining the latitude parameter value
	* @private
	**/
	decimal _latitude;
	/**Local cache defining the longitude parameter value
	* @private
	**/
	decimal _longitude;
	/**Local cache to save distanceUnits parameter value
	* @private
	**/
	string _distanceUnits;
	
	/**Constant defining the value of distance units in Kilometres
	 * @private
	 **/
	constant string KMS := "KMS";
	/**Constant defining the value of distance units in Miles
	 * @private
	 **/
	constant string MILES := "MILES";
	
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	GeoUtil geoUtil;
    	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
 *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      new action<>,
		                      initComplete );
		
		geoUtil := new GeoUtil;
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ LATITUDE, LONGITUDE, DISTANCE_UNIT], 
		                                         [ Constants.FLOAT, Constants.FLOAT, Constants.STRING], 
		                                         [ true, true, false] );
		
		
		if(result) then {
			//Cache the input/output channel names
			_outputDataName := config.outputDataNames[0];

			_distanceUnits := config.getOrString(DISTANCE_UNIT, MILES);
			if not (_distanceUnits.toLower() = MILES.toLower() or _distanceUnits.toLower() = KMS.toLower()) then {
				log "Param "+DISTANCE_UNIT+" must be either "+MILES+" or "+KMS+". Value specified is "+_distanceUnits at ERROR;
				result := false;
			}
			
			_latitude := config.getDecimal(LATITUDE);
			if(_latitude > 90.0d or _latitude < -90.0d) then {
				log "Param "+LATITUDE+" must be between +90.0 and -90.0. Value specified is "+_latitude.toString() at ERROR;
				result := false;
			}
			
			_longitude := config.getDecimal(LONGITUDE);
			if(_longitude > 180.0d or _longitude < -180.0d) then {
				log "Param "+LONGITUDE+" must be between +180.0 and -180.0. Value specified is "+_longitude.toString() at ERROR;
				result := false;
			}
	    } else {
			result := false;
		}
		return result;
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;
		//check if location data is valid or not
		if(dataIn.xValue > 90.0 or dataIn.xValue < -90.0 or dataIn.yValue > 180.0 or dataIn.yValue < -180.0) then {
			log "Incorrect values for latitude/longitude in data." at WARN;
		} else {
			decimal dist;
			if (_distanceUnits.toLower() = KMS.toLower()) {
				dist :=  geoUtil.haversineDistanceInKM( _latitude, _longitude, dataIn.xValue.toDecimal(), dataIn.yValue.toDecimal());
			} else {
				dist :=  geoUtil.haversineDistanceInMiles( _latitude, _longitude, dataIn.xValue.toDecimal(), dataIn.yValue.toDecimal());
			}
			
			Data dataOut := new Data;
			dataOut.streamName := _outputDataName;
			dataOut.type       := DataConstants.COMPUTED;
			dataOut.sourceId   := dataIn.sourceId;
			dataOut.timestamp  := currentTime.toDecimal();
			dataOut.dValue     := dist;
			
			_analyticObject.sendData(dataOut);
		}
	}
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the Distance Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternDistance {
	event StayAlive {}
	
	action onload()	{
		string discard := Distance.NAME.intern();
		discard := Distance.KMS.intern();
		discard := Distance.LATITUDE.intern();
		discard := Distance.LONGITUDE.intern();
		discard := Distance.DISTANCE_UNIT.intern();
		discard := Distance.MILES.intern();
		on all StayAlive() {}
	}
}