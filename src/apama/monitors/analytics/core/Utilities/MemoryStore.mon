//*****************************************************************************
// Title: MemoryStore Analytic implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.utilities;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;
using com.industry.analytics.Cache;

using com.apama.memorystore.Iterator;
using com.apama.memorystore.Row;
using com.apama.memorystore.Table;

/* @AnalyticDefinition
{
	"name": "MemoryStore",
	"description": "Caches the input data into a MemoryStore table.",
	"group": "Utilities",
	"documentation": "com/industry/analytics/utilities/MemoryStore.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel which receives the data to be stored"
		}
	],
	"properties": [
        {
			"name": "name",
			"description": "This name is used as the memory store table name",
			"type": "string",
			"optional": true,
			"defaultValue": "Input channel name",
            "validator": "function(value) { return value.length > 0 || 'Name must not be blank' }"
		},{
			"name": "exposeMemoryView",
			"description": "When this field is true, the MemoryStore makes the rows in the in-memory table associated with this schema available by creating DataViews that contain this data",
			"type": "boolean",
            "defaultValue": true,
            "optional": true,
			"advanced":true
		},{
			"name": "exposePersistentView",
			"description": "When this field is true, the MemoryStore makes the rows in the on-disk table associated with this schema available by creating DataViews that contain this data",
			"type": "boolean",
            "defaultValue": false,
            "optional": true,
			"advanced":true
		},{
            "name": "managementId",
            "description": "Defines the id used for management of the analytic",
            "type": "string",
            "optional": true,
            "advanced": true
        }
	]
}
*/

/** 
 *  Sending this event to the MemoryStore Analytic causes it
 *  to log the specified MemoryStore table to the Correlator log.
 *  This should only be used for internal diagnostic/debugging purposes.
 *
 *  @see com.industry.analytics.MemoryStore  The MemoryStore Analytic.
 *  @private
 */
event DumpTable {
	/** The name of the MemoryStore table that should be printed. */
	string tableName;
}


/**
 *  The MemoryStore Analytic caches the Data data from the defined 
 *  input Data channel to a table in MemoryStore named by the provided <font face="courier" size="-1">outputDataName</font>. 
 *  It also adds an entry in the MemoryStore table for that table name. The
 *  Data table is keyed on name and sourceId. This method was chosen over
 *  putting all the output into a single Data table due to a limitation 
 *  of using trend tables within Apama Dashboards that only allows one trend
 *  table to be created and maintained from any given table.  This causes a 
 *  problem when trying to display filtered output from a single table.
 * 
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>Only a single input Data stream name must be provided.</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>None</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  <tr><td><b>name</b></td><td>The name of the MemoryStore table where the incoming Data event data will be stored</td>
 *      <td>A non-empty string</td><td>String</td><td>False</td><td>The input Data name</td></tr>
 *  <tr><td><b>exposeMemoryView</b></td><td>When this field is true, the MemoryStore makes the rows in the in-memory table 
 *                                          associated with this schema available by creating DataViews that contain this data.</td>
 *      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
 *  <tr><td><b>exposePersistentView</b></td><td>When this field is true, the MemoryStore makes the rows in the on-disk table 
 *                                              associated with this schema available by creating DataViews that contain this data.</td>
 *      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">false</font></td></tr>
 *  </table></dd>
 *  </dl>
 *  <dl><dt><b>Example usage:</b></dt>
 <dd><code>
// Define a MemoryStore Analytic which will create a MemoryStore table 
// called "Input1" and store Data events from the channel "Input1" into it.
send com.industry.analytics.Analytic("MemoryStore", ["Input1"], new sequence&ltstring&gt, new dictionary&ltstring,string&gt ) to "";

// Define a MemoryStore Analytic which will create a MemoryStore table 
// called "MyTable" and store Data events from the channel "Input2" into it.
send com.industry.analytics.Analytic("MemoryStore", ["Input2"], new sequence&ltstring&gt, {"name":"MyTable"} ) to "";
</code></dd>
 *  </dl>
 * 
 *  @listens com.industry.analytics.DumpTable  This event causes the specified MemoryStore table to be dumped to the  
 *                                       Correlator log. This should only be used for debugging purposes.
 */
event MemoryStore
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "MemoryStore";
	
	/** This constant defines the configuration parameter name that
	 *  specifies the name of the MemoryStore table to create */
	constant string TABLE_NAME := "name";
	
	/** This constant defines the configuration parameter name
	 *  that indicates whether the MemoryStore will create dataviews
	 *  for the in-memory tables */
	constant string EXPOSE_MEMORY_VIEW := "exposeMemoryView";
	/** This constant defines the configuration parameter name
	 *  that indicates whether the MemoryStore will create dataviews
	 *  for the on-disk tables */
	constant string EXPOSE_PERSISTENT_VIEW := "exposePersistentView";
	
	// Algo specific variables
	/** Local cached input Data name
	 *  @private */
	string _inputDataName;
	/** Local cached output Data name
	 *  @private */
	string _tableName;
	/** Local cached copy of the completion callback. This is required
	 *  as we need to wait for the tables to be created before calling 
	 *  back the application. 
	 *  @private */	
	action<boolean, AnalyticInterface> _initComplete;
	/** Local cached value for the exposeMemoryView configuration parameter
	 *  @private */
	boolean _exposeMemoryView;
	/** Local cached value for the exposePersistentView configuration parameter
	 *  @private */
	boolean _exposePersistentView;

	/** Cache for the Data stream
	 *  @private */
	Cache _dataStreamCache;
	/** Cache for the MemoryStores
	 *  @private */
	Cache _dvCache;
	/** Boolean indicating whether or not the Data Cache is ready
	 *  @private */
	boolean _isDataCacheReady;
	/** Boolean indicating whether or not the MemoryStores Cache is ready
	 *  @private */
	boolean _isDvCacheReady;
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	/** The cached Analytic Interface object 
	 *  @private */
	AnalyticInterface _AnalyticInterface;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}

		_initComplete := initComplete;
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      _setupCache );
	}
	
	/** 
	 *  @private 
	 */
	action _setupCache(boolean success, AnalyticInterface ci)
	{
		if not success then {_initComplete(success, ci);}
		_AnalyticInterface := ci;
		_dataStreamCache.init(_tableName,
		                   Data.getFieldNames(),
		                   Data.getFieldTypes(),
		                   _exposeMemoryView,
		                   _exposePersistentView,
		                   _dataStreamCacheReady);
		_dvCache.init(NAME,
		              ["name", "dvName"],
		              [Constants.STRING, Constants.STRING],
	                   _exposeMemoryView,
	                   _exposePersistentView,
	                   _dvCacheReady);
	}
	
	
	/** 
	 *  @private 
	 */
	action _dataStreamCacheReady( string tableName, boolean flag )
	{
		_isDataCacheReady := flag;
		if _isDataCacheReady then
		{
			if _isDvCacheReady then {_cachesReady();}
		}
		else
		{
			log "Data Cache setup failed." at ERROR;
			_initComplete(false, new AnalyticInterface);
		}
	}
	
	
	/** 
	 *  @private 
	 */
	action _dvCacheReady(string tableName, boolean flag)
	{
		_isDvCacheReady := flag;
		if _isDvCacheReady then
		{
			if _isDataCacheReady then {_cachesReady();}
		}
		else
		{
			log "DV Cache setup failed." at ERROR;
			_initComplete(false, new AnalyticInterface);
		}
	}
	
	
	/** 
	 *  @private 
	 */
	action _cachesReady()
	{
		log _tableName + " caches ready for instance of Analytic " + NAME at DEBUG;
		
		_dvCache.add(_getDvRow);
		
		on all DumpTable(tableName=_tableName)
		{
			dumpTable();
		}
		
		_initComplete(true, _AnalyticInterface);
	}
	
	
	/**
	 *  Helper action to dump the contents of the cache table.
	 *  @private
	 */
	action dumpTable()
	{
		log "Table: " + _tableName at INFO;
		Data currData := new Data;
		Iterator iterator := _dataStreamCache.getIterator();
		while not iterator.done()
		{
			Row row := iterator.getRow();
			currData.populateFromRow(row);
			log currData.toString() at DEBUG;
			iterator.step();
		}
	}
	
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 0, 
		                                         [ TABLE_NAME,       EXPOSE_MEMORY_VIEW, EXPOSE_PERSISTENT_VIEW ],
		                                         [ Constants.STRING, Constants.BOOLEAN,  Constants.BOOLEAN ],
		                                         [ false, false, false ] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the input/output channel names
			_inputDataName := config.inputDataNames[0];

			_exposeMemoryView     := config.getOrBoolean( EXPOSE_MEMORY_VIEW,     true  );
			_exposePersistentView := config.getOrBoolean( EXPOSE_PERSISTENT_VIEW, false );
			
			// Default to using the name of the input data channel 
			// as the name of the MemoryStore table
			_tableName := config.getOrString( TABLE_NAME, config.inputDataNames[0] ).ltrim().rtrim();
			if( _tableName.length() = 0 ) then {
				log "MemoryStore table name parameter cannot contain blank strings." at ERROR;
				result := false;
			}
			
		} else {
			result := false;
		}
		
		return result;
	}
	
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;
		_dataStreamCache.add( dataIn.getRow );
	}
	
	
	/** 
	 *  @private 
	 */
	action _getDvRow(Table t) returns Row
	{
		Row row := t.get(_inputDataName);
		row.setString("name", _tableName);
		row.setString("dvName", "DV_MEMST_IAK_" + _tableName + "_memory");
		return row;
	}
	

	/**
	*  Optional action to reset the state of the analytic instance
	*  back to its initialisation state.
	*  This is called internally by the Analytic Object, and  
	*  should not be called directly by the Users application.
	*  If the application has created this Analytic using the 
	*  #init() action directly, then the <font face="courier" size="-1">reset</font>
	*  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	*  that was returned should be used instead.
	*
	*  @private
	*/
	action reset() {
		_dataStreamCache.clearCache();
	}
}

/** 
 *  This internal Monitor is used to automatically intern 
 *  any string constants that are defined that are associated
 *  with the MemoryStore Analytic in order to improve  
 *  performance when handling strings.
 *
 *  Note: The listener that is created is required in order
 *        to keep the monitor alive between a Persistant  
 *        Correlators recovery.  Otherwise, this would be a 
 *        transient monitor, and it would not be recovered.  
 *        Which would then mean that the strings would not
 *        interned in the recovered Correlator.
 *
 *  @private
 */
monitor InternMemoryStore {
	event StayAlive {}
	
	action onload() {
		string discard := MemoryStore.NAME.intern();
		discard := MemoryStore.EXPOSE_MEMORY_VIEW.intern();
		discard := MemoryStore.EXPOSE_PERSISTENT_VIEW.intern();
		on all StayAlive() {}
	}
}
