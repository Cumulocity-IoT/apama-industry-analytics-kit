//*****************************************************************************
// Title: Logger Analytic implementation
//
// Copyright (c) 2016-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.utilities;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Constants;


/* @AnalyticDefinition
{
	"name": "Logger",
	"description": "Logs data into a correlator log file.",
	"group": "Utilities",
	"documentation": "com/industry/analytics/utilities/Logger.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to log data",
			"dataProperties": ["dValue", "sValue", "xValue", "yValue", "zValue"]
		}
	],
	"outputChannels": [],
	"properties": [
		{
			"name": "fields",
			"description": "A Sequence of fields to log in csv.",
			"type": "string",
			"validator": "function(value) { return value.match(/^\\[\\s*((\"[^\"]*\"\\s*,\\s*)*(\"[^\"]*\"))?\\s*\\]$/g) || 'Value must be a stringified sequence of fields eg. [\"dValue\"]' }",
			"optional": true,
			"defaultValue": "toString() the event"
		},{
			"name": "emitToChannel",
			"description": "Name of channel to emit to.",
			"type": "string",
			"optional": true,
			"defaultValue": "Do not emit"
		}
	]
}
*/
/**
*  The Logger Analytic logs to the correlator log and (optionally) a channel.
*
*  If "fields" are specified then the events are logged in csv format, otherwise the Data event is logged in its toString form.
*
*  To log to a file run "engine_receive -s -c &lt;ChannelName&gt; -f &lt;fileName&gt;"
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>None</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>fields</b></td><td>A list of fields to log in csv format. If not provided then the event is toString()-ed.</td>
*      <td>Valid values are <font face="courier" size="-1"> streamName, dValue, sValue, xValue, yValue, zValue, type, timestamp, param.xxx</font> </td><td>stringified sequence&lt;string&gt;</td><td>False</td><td>The toString() of the event is logged instead.</td></tr>
*  <tr><td><b>emitToChannel</b></td><tdThe name of a channel to emit to.</td>
*      <td></td><td>String</td><td>false</td><td>Don't emit</td></tr>
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
// Log the toString() of the event
send com.industry.analytics.Analytic("Logger", ["Input"], new sequence<string>, new dictionary<string, string> ) to "";

//Log the streamName and dValue of the event
send com.industry.analytics.Analytic("Logger", ["Input"], new sequence<string>, {"fields":["streamName","dValue"].toString()} ) to "";

// Emit the dValue of the event to a channel
send com.industry.analytics.Analytic("Logger", ["Input"], new sequence<string>, {"fields":["dValue"].toString(), "emitToChannel":"loggingChannel"} ) to "";

</code></dd>
*</dl>
*/
event Logger
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "Logger";
	/** This constant defines the name of parameter decimalPrecision. */
	constant string FIELDS := "fields";
	constant string EMIT_TO_CHANNEL := "emitToChannel";

	/** @private */
	sequence<string> _fields;
	
	/** @private */
	optional<string> _emitToChannel; 

	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** @private */
	dictionary<string, action<Data> returns string> _fieldGetters;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
 *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {
		_fieldGetters := {
			"streamname": streamNameGetter,
			Constants.DVALUE: dValueGetter,
			Constants.SVALUE: sValueGetter,
			Constants.XVALUE: xValueGetter,
			Constants.YVALUE: yValueGetter,
			Constants.ZVALUE: zValueGetter,
			"timestamp": timestampGetter,
			Constants.TYPE: typeGetter,
			"sourceid": sourceIdGetter
			// Individual params are handled separately
		};	
		
		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      new action<>,
		                      initComplete );
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 0, 
		                                         [ FIELDS, EMIT_TO_CHANNEL ], 
		                                         [ Constants.SEQUENCE_STRING, Constants.STRING ], 
		                                         [ false, false ] );
		
		
		if result then {
			
			_fields := tidyFields(config.getOrSequenceString(FIELDS, new sequence<string>));
			if not validateFields(_fields) {
				return false;
			}
			
			if config.hasParam(EMIT_TO_CHANNEL) {
				_emitToChannel := config.getString(EMIT_TO_CHANNEL);
			}
	    }		
		return result;
	}
	
	action tidyFields(sequence<string> fields) returns sequence<string> {
		sequence<string> result := new sequence<string>;
		string field;
		for field in fields {
			string tidyField := field.toLower();
			if tidyField.find("param.") = 0 {
				tidyField := "param." + field.substring("param.".length(), field.length());
			}
			result.append(tidyField);
		}
		return result;
	}
	
	action validateFields(sequence<string> fields) returns boolean {		
		string field;
		for field in _fields {
			if not (_fieldGetters.hasKey(field) or field.find("param.") = 0) {
				log "Param " + FIELDS + ", invalid field: " + field at ERROR;
				return false;
			}
		}
		return true;
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;

		string output;
		if _fields.size() = 0 {
			output := dataIn.toString();
		} else { 
			output := generateCsvOutput(dataIn);
		}
		
		ifpresent _emitToChannel {
			emit output to _emitToChannel; 
		}
		log output at INFO;		
	}
	
	action generateCsvOutput(Data dataIn) returns string {
		sequence<string> values := new sequence<string>;
		string field;
		for field in _fields {
			if _fieldGetters.hasKey(field) {
				values.append(csvEscape(_fieldGetters[field](dataIn)));
			} else {
				string paramName := field.substring("param.".length(), field.length());
				values.append(csvEscape(dataIn.params.getOrDefault(paramName)));
			}
		}
		return ",".join(values);
	}
	
	action csvEscape(string value) returns string {
		if value.matches("[\"\\n\\r,]") {
			return "\"" + value.replaceAll("\"","\"\"") + "\"";
		} else {
			return value;
		}
	}

	action streamNameGetter(Data d) returns string { return d.streamName; }
	action dValueGetter(Data d) returns string { return d.dValue.toFloat().toString(); }
	action sValueGetter(Data d) returns string { return d.sValue; }
	action xValueGetter(Data d) returns string { return d.xValue.toString(); }
	action yValueGetter(Data d) returns string { return d.yValue.toString(); }
	action zValueGetter(Data d) returns string { return d.zValue.toString(); }
	action typeGetter(Data d) returns string { return d.type; }
	action timestampGetter(Data d) returns string { return d.timestamp.toFloat().toString(); }
	action sourceIdGetter(Data d) returns string { return d.sourceId; }	
}