//*****************************************************************************
// Title: Peer Analysis Analytic implementation
//
// Copyright (c) 2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.detectors;

using com.industry.analytics.Data;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;

using com.industry.analytics.streaming_calculations.Average;
using com.industry.analytics.streaming_calculations.Spread;
using com.industry.analytics.detectors.Threshold;

/* @AnalyticDefinition
{
	"name": "PeerAnalysis",
	"description": "Detect data outside the normal range of values.",
	"group": "Detectors",
	"documentation": "com/industry/analytics/detectors/PeerAnalysis.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to perform the Peer Analysis",
			"dataProperties": ["dValue"]
		}
	],
	"outputChannels": [
		{
			"name": "Breaches",
			"description": "The channel on which to output threshold breaches",
			"dataProperties": ["+dValue","+params"]
		}
	],
	"properties": [
		{
			"name": "threshold",
			"description": "The threshold value that is used to detect breaches",
			"type": "decimal"
		},{
			"name": "direction",
			"description": "Whether to check for crossing, falling or rising threshold breaches",
			"type": "string",
			"optional": true,
			"defaultValue": "crossing",
			"validValues": ["crossing", "falling", "rising"]
		},{
			"name": "duration",
			"description": "How long (in seconds) the threshold may be breached before an Anomaly Data is generated. If value=0.0d, then Anomaly Data is generated immediately.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 0,
			"validator": "function(value) { return value >= 0 || 'Value must be greater than or equal to 0' }",
			"postfix": "(Seconds)"
		},{
			"name": "repeats",
			"description": "The maximum number of times an Anomaly Data is generated for the breach before stopping checking. A value of 0 indicates unlimited repeats.",
			"type": "integer",
			"optional": true,
			"defaultValue": 1,
			"validator": "function(value) { return value >= 0 || 'Value must be greater than or equal to 0' }"
		},{
			"name": "timeWindow",
			"description": "Defines the time window to calculate the moving average over",
			"type": "decimal",
			"optional": true,
			"defaultValue": 60,
			"validator": "function(value) { return value > 0 || 'Value must be greater than 0.0' }",
			"postfix": "(Seconds)"
		},{
            "name": "managementId",
            "description": "Defines the id used for management of the analytic",
            "type": "string",
            "optional": true,
            "advanced": true
        }
	]
}
*/
/**
 *  The Peer Analysis Analytic calculates the "normal" range of Data 
 *  events and detects if incoming Data events are outside that range.
 *  It does this by calculating the spread between the raw Data events 
 *  being received and a moving average calculated for that same 
 *  set of Data.  It then generates an anomaly Data event if the 
 *  the calculated Spread is breaches the defined threshold value. 
 *  This Analytic utilizes the Average, Spread and Threshold analytics 
 *  internally, so the same set of configuration parameters are available
 *  in this Analytic. This allows the moving Average timewindow to be 
 *  defined, and the threshold value can either look for rising 
 *  breaches, falling breaches or every time a threshold is passed in 
 *  both directions. These can either be reported immediately or, to 
 *  ignore spikes, after a set duration based on the Data timestamps.
 * 
 *  In addition the computation can output a data event for up to a set 
 *  maximum number of repeats (multiples of the duration) whilst the 
 *  breach continues. This latter functionality is not applicable for 
 *  the bi-directional breach detection as after the duration, the 
 *  breached side is now considered the valid side and a breach reported 
 *  for crossing the threshold in the opposite direction.
 *
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>Only one input Data stream names must be provided.</dd>
 *  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>Only a single output Data stream name must be provided. Only Data events of Anomaly type are generated.  All the
 *      <font face="courier" size="-1">params</font> from the breaching input Data are copied to the anomaly Data.</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  <tr><td><b>timeWindow</b></td><td>Defines the time window to calculate the moving average over</td>
 *      <td>Stringified decimal <font face="courier" size="-1">>0.0d</font></td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">60.0d</font></td></tr>
 *  <tr><td><b>threshold</b></td><td>Defines the threshold value that is used to detect breaches</td>
 *      <td>Stringified decimal</td><td>Decimal</td><td>True</td><td></td></tr>
 *  <tr><td><b>direction</b></td><td>Defines whether to check for crossing, falling or rising threshold breaches</td>
 *      <td><font face="courier" size="-1">"crossing"</font>, <font face="courier" size="-1">"falling"</font> or <font face="courier" size="-1">"rising"</font>. <b>Note:</b> These values are case-insensitive</td>
 *      <td>String</td><td>False</td><td><font face="courier" size="-1">'crossing'</font></td></tr>
 *  <tr><td><b>duration</b></td><td>Defines how long (in seconds) the threshold may be breached before an 
 *                                  Anomaly Data is generated. If a value of <font face="courier" size="-1"><=0.0d</font> is defined,
 *                                  the Anomaly Data is generated immediately.</td>
 *      <td>Stringified Decimal <font face="courier" size="-1">>= 0.0d</font></td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">0.0d</font></td></tr>
 *  <tr><td><b>repeats</b></td><td>Defines the maximum number of times an Anomaly Data is generated for the breach
 *                                 before stopping checking. A value of <font face="courier" size="-1">0</font> indicates unlimited repeats. </td>
 *      <td>Stringified Integer <font face="courier" size="-1">>= 0</font></td><td>Integer</td><td>False</td><td><font face="courier" size="-1">1</font></td>
 *  </table></dd>
 *  </dl>
 *  <dl><dt><b>Example usage:</b></dt>
 <dd><code>
// Define a PeerAnalysis Analytic for Data events on the channel "Input1"
// and generate an anomaly Data event on the channel "Output1" if the difference 
// between the current Data event and the moving average of Data events
// goes over the defined threshold value of 10.0
send com.industry.analytics.Analytic("PeerAnalysis", ["Input1"], ["Output1"], {"threshold":"10.0"} ) to "";

// Define a PeerAnalysis Analytic for Data events on the channel "Input2"
// and generate an anomaly Data event on the channel "Output2" if the difference 
// between the current Data event and the moving average, calculated over a 
// 30 second timewindow, of Data events goes over the defined threshold value of 10.0
send com.industry.analytics.Analytic("PeerAnalysis", ["Input2"], ["Output2"], {"threshold":"10.0","timeWindow":"30.0"} ) to "";
</code></dd>
 *  </dl>
 */

event PeerAnalysis {
	/** This constant defines the name of the Analytic. */
	constant string NAME := "PeerAnalysis";
	
	/** This constant defines the prefix used for the internal
	 *  channel names.
	 *  @private */
	constant string CHANNEL_PREFIX := "__internalChannel_PEER";
	
	//Algo specific variables
	/** Local cached input Data name
	 *  @private */
	string _inputDataName;
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** Local cached copy of the original configuration provided
	 *  for the Peer Analysis Analytic.
	 *  @private */
	Analytic _config;
		
	/** Local cached closure for the initialisation of the 
	 *  Peer Analysis Analytic.
	 *  @private */
	action<boolean, AnalyticInterface> _initCompletePeerAnalysis;

	/** Local cached AnalyticInterface object for the internally
	 *  created Average Analytic.
	 *  @private */
	AnalyticInterface _averageAnalyticInterface;
	/** Local cached AnalyticInterface object for the internally
	 *  created Spread Analytic.
	 *  @private */
	AnalyticInterface _spreadAnalyticInterface;
	/** Local cached AnalyticInterface object for the internally
	 *  created Threshold Analytic.
	 *  @private */
	AnalyticInterface _thresholdAnalyticInterface;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	action init( Analytic config,
	             action<boolean, AnalyticInterface> initComplete ) {

		// In this case, we dont have any native parameters, they are all handled
		// by the underlying Analytics that make up the Peer Analysis.  
		// Note: We still need to call the validateParams action as this does 
		// other checks too.
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         new sequence<string>,
		                                         new sequence<string>,
		                                         new sequence<boolean> );

		// Only check the specific params if the validation was okay
		if( result ) then {

			if( config.hasParam( Spread.BY_SOURCEID ) ) then {
				log "Configuration parameter "+Spread.BY_SOURCEID+" cannot be used in this Analytic." at ERROR;
				result := false;
			} else {
				// Cache the input/output channel names
				_inputDataName  := config.inputDataNames[0];
				_outputDataName := config.outputDataNames[0];
	
				// Cache the completion closure action
				_initCompletePeerAnalysis := initComplete;
		
				// Cache the original configuration
				_config := config;
				
				// Create Average Analytic using the defined input channel
				// and creating an internal channel for the average.
				// We pass in all the configuration parameters to ensure 
				// future compatibility with new features of the Analytics
				
				// We also need to add the "bySourceId" parameter to make the 
				// Analytic calculate the average over all sourceIds
				dictionary<string,string> avgParams := _config.params.clone();
				avgParams.add( Average.BY_SOURCEID, "false" ); 
				(new Average).init( com.industry.analytics.Analytic( Average.NAME, 
				                                                     [ _inputDataName ],
																	 [ CHANNEL_PREFIX+"_AVERAGE_"+_outputDataName ], 
				                                                     avgParams ), 
				                    _initCompleteAverage );
			}
		}
		
		if( not result ) then {
			// Call the closure with an error
			initComplete( false, new AnalyticInterface );
		}
	}
	
	/**
	 *  This action defines the completion handler for the for Average Analytic
	 *  @private */
	action _initCompleteAverage( boolean success, AnalyticInterface tInterface ) {
		
		// If the Average Analytic was created successfully
		if( success ) then {
			// Cache the Average Analytic interface object 
			_averageAnalyticInterface := tInterface;

			// Create Spread Analytic using the original input channel 
			// and the internally created Average Analytic channel output
			// We pass in all the configuration parameters to ensure 
			// future compatibility with new features of the Analytics
			(new Spread).init( com.industry.analytics.Analytic( Spread.NAME, 
			                                                    [ _inputDataName,
			                                                      CHANNEL_PREFIX+"_AVERAGE_"+_outputDataName ], 
			                                                    [ CHANNEL_PREFIX+"_SPREAD_"+_outputDataName ], 
			                                                    _config.params ), 
			                   _initCompleteSpread );
		} else {
			log "Error spawning Peer Analysis Analytic - Failed to create the Average Analytic part of the chain" at ERROR;
			_initCompletePeerAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/**
	 *  This action defines the completion handler for the for Spread Analytic
	 *  @private */
	action _initCompleteSpread( boolean success, AnalyticInterface tInterface ) {
		
		// If the Average Analytic was created successfully
		if( success ) then {
			// Cache the Spread Analytic interface object 
			_spreadAnalyticInterface := tInterface;

			// Create Spread Analytic using the original input channel 
			// and the internally created Average Analytic channel output
			// We pass in all the configuration parameters to ensure 
			// future compatibility with new features of the Analytics
			(new Threshold).init( com.industry.analytics.Analytic( Threshold.NAME, 
																   [ CHANNEL_PREFIX+"_SPREAD_"+_outputDataName ], 
																   [ _outputDataName ], 
			                                                       _config.params ),
			                      _initCompleteThreshold );
		} else {
			log "Error spawning Peer Analysis Analytic - Failed to create the Spread Analytic part of the chain" at ERROR;
			_initCompletePeerAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/**Init complete for Threshold Analytic
	* @private */
	action _initCompleteThreshold( boolean success, AnalyticInterface tInterface ) {
		
		// If the Average Analytic was created successfully
		if( success ) then {
			// Cache the Threshold Analytic interface object 
			_thresholdAnalyticInterface := tInterface;

			// Start the interfaces to listen for events
			_averageAnalyticInterface.start();
			_spreadAnalyticInterface.start();
			_thresholdAnalyticInterface.start();
			
			// Create an Analytic object for the PeerAnalysis.
			// This is only required to handle the reset/deletion of 
			// the internally created Analytics.
			// There is no need to implement the processData action
			// as the internally created Analytics will handle this.
			_analyticObject := new AnalyticObject;
			_analyticObject.initExtended( _config,
			                              new action<Data>, 
			                              new action<dictionary<string, Data> >,
			                              false,
			                              reset,
			                              onDelete,
			                              _initCompletePeerAnalysis );

		} else {
			log "Error spawning Peer Analysis Analytic - Failed to create the Threshold Analytic part of the chain" at ERROR;
			_initCompletePeerAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/**
	 *  Optional action to reset the state of the Analytic instance
	 *  back to its initialisation state.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">reset</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @private
	 */
	action reset() {
		// Reset all the analytics
		_averageAnalyticInterface.reset();
		_spreadAnalyticInterface.reset();
		_thresholdAnalyticInterface.reset();
	}
	
	/**
	 *  Optional action that is called on deleting the Analytic
	 *  instance. This action should clear any local state/listeners
	 *  that have been created by the Analytic instance.
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *
	 *  @private
	 */
	action onDelete() {
		// Stop all the internally created Analytic interfaces
		_averageAnalyticInterface.stop();
		_spreadAnalyticInterface.stop();
		_thresholdAnalyticInterface.stop();

	}
}

/** 
 *  This internal Monitor is used to automatically intern 
 *  any string constants that are defined that are associated
 *  with the PeerAnalysis Analytic in order to improve  
 *  performance when handling strings.
 *
 *  Note: The listener that is created is required in order
 *        to keep the monitor alive between a Persistant  
 *        Correlators recovery.  Otherwise, this would be a 
 *        transient monitor, and it would not be recovered.  
 *        Which would then mean that the strings would not
 *        interned in the recovered Correlator.
 *
 *  @private
 */
monitor InternPeerAnalysis {
	event StayAlive {}
	
	action onload()	{
		string discard := PeerAnalysis.NAME.intern();
		discard := PeerAnalysis.CHANNEL_PREFIX.intern();
		on all StayAlive() {}
	}
}
