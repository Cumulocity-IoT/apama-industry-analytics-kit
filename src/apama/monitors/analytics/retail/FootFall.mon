package com.industry.analytics.retail;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

using com.industry.analytics.geolocation.GeoFence;
using com.industry.analytics.flow_manipulation.Mapper;
using com.industry.analytics.streaming_calculations.Sum;

/* @AnalyticDefinition
{
	"name": "FootFall",
	"description": "Calculates the number of people currently in the store.",
	"group": "retail",
	"documentation": "com/industry/analytics/retail/FootFall.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to check",
			"dataProperties": ["xValue", "yValue"]
		}
	],
	"outputChannels": [
		{
			"name": "FootFallData",
			"description": "The channel on which to output the FootFall values",
			"dataProperties": ["dValue", "sValue"]
		}
	],
	"properties": [
		{
			"name": "geoFenceLatitude",
			"description": "Defines the latitude of the retail store",
			"type": "decimal",
			"optional": false
			
		},{
			"name": "geoFenceLongitude",
			"description": "Defines the longitude of the retail store",
			"type": "decimal",
			"optional": false
		},{
			"name": "geoFenceRadius",
			"description": "Defines the radius to be used for geofence of the retail store",
			"type": "decimal",
			"optional": false
		},{
			"name": "timeWindow",
			"description": "Defines the timewindow for which footfall is calculated. If set to zero, footfall will give number of customers in the store.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 0
			
		},
		{
			"name": "smoothingFactor",
			"description": "Defines the smoothing factor to be used for precision.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 60
		}
	]
}
*/

/**
*  The FootFall Analytic computation generates a Data containing number of people in a store at a given point.
*  It does this by calculating sum of people entering/exiting a store geofence. 
*  This Analytic utilizes the Geofence, Mapper and Sum analytics internally to do the FootFall calculation.
*  A smoothing factor is used make result precise. Larger the number for <font face="courier" size="-1">smoothingFactor</font> better the precision.</br>
*  When timewindow is set to 0, FootFall will generate live data for number of people inside store at a time. 
*  When timestamp is greater than zero then FootFall Analytic will generate data regarding number of persons entering the store in rolling timewindow.
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>geoFenceLatitude</b></td><td>Defines the latitude coordinate for store geofence.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>True</td><td> </td></tr>
*  <tr><td><b>geoFenceLongitude</b></td><td>Defines the longitude coordinate for store geofence.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>True</td><td> </td></tr>
*  <tr><td><b>geoFenceRadius</b></td><td>Defines the radius for store geofence.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>True</td><td> </td></tr>
*  <tr><td><b>timewindow</b></td><td>If set to 0, it FootFall will generate number of people inside store, else only persons entering store.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">0.0d</font> </td></tr>
*  <tr><td><b>smoothingFactor</b></td><td>Defines the smoothing factor to be used for precision</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">60.0d</font></td></tr>
*
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a FootFall Analytic which takes Data events on the channel "Input"  
//and calculate the number of customers entering the Store specified by Geofence params(Lat, Lon and radius). It publishes
//a Data event with the calculated value of FootFall on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("FootFall", ["Input"], ["Output"], {"geoFenceLatitude": "52.204004", "geoFenceLongitude":"0.121794","geoFenceRadius": "60.0","timeWindow": "60.0", "smoothingFactor":"1.0"}) to "";

//Define a FootFall Analytic which takes Data events on the channel "Input"  
//and calculate the number of customers inside the Store (live data) specified by Geofence params(Lat, Lon and radius). It publishes
//a Data event with the calculated value of FootFall on the output channel "Output" after receiving every Data event. 
send com.industry.analytics.Analytic("FootFall", ["Input"], ["Output"], {"geoFenceLatitude": "52.204004", "geoFenceLongitude":"0.121794","geoFenceRadius": "60.0"}) to "";
</code></dd>
*</dl>
*/


event FootFall
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "FootFall";
	
	/** This constant defines the prefix used for the internal
	 *  channel names.
	 *  @private */
	constant string CHANNEL_PREFIX := "__internalChannel_FOOTFALL";
	
	/** This constant defines the configuration parameter name
	 *  that defines the latitude of the geofenced area */
	constant string GEOFENCE_LATITUDE    := "geoFenceLatitude";
	
	/** This constant defines the configuration parameter name
	 *  that defines the longitude of the geofenced area */
	constant string GEOFENCE_LONGITUDE   := "geoFenceLongitude";
	
	/** This constant defines the configuration parameter name
	 *  that defines the radius of the geofenced area in metres, when using a circular geofence. */
	constant string GEOFENCE_RADIUS := "geoFenceRadius";
	
	/** This constant defines the configuration parameter timeWIndow value  */
	constant string TIMEWINDOW := "timeWindow";
	
	/**This constant defines the configuration parameter name
	 *  that specifies the smoothing factor used to calculate the sum.*/
	constant string SMOOTHING_FACTOR := "smoothingFactor";
	
	/**Constant defining ENTERED string
	* @private */
	constant string ENTERED := "ENTERED";
	/**Constant defining EXITED string
	* @private */
	constant string EXITED := "EXITED";
	/**Constant defining enableEntry geofence param
	* @private */
	constant string ENABLE_ENTRY := "enableEntry";
	/**Constant defining enableExit geofence param
	* @private */
	constant string ENABLE_EXIT := "enableExit";
	/**Constant defining useHypertree geofence param
	* @private */
	constant string USE_HYPERTREE := "useHypertree";
	/**Constant defining inputField Mapper param
	* @private */
	constant string INPUT_FIELD:= "inputField";
	/**Constant defining outputField Mapper param
	* @private */
	constant string OUTPUT_FIELD:= "outputField";
	/**Constant defining sValue string
	* @private */
	constant string S_VALUE := "sValue";
	/**Constant defining dValue string
	* @private */
	constant string D_VALUE := "dValue";
	/**Constant defining mapping Mapper param
	* @private */
	constant string MAPPING := "mapping";
	/**Constant defining calculationType param for Sum Analytic
	* @private */
	constant string CALCULATION_TYPE := "calculationType";
	/**Constant defining calculationValue param for Sum Analytic
	* @private */
	constant string CALCULATION_VALUE := "calculationValue";
	/**Constant defining bySourceId param for Sum Analytic
	* @private */
	constant string BY_SOURCE_ID := "bySourceId";
	
	//Algo specific variables
	/** Local cached input Data name
	 *  @private */
	string _inputDataName;
	/** Local cached output Data name
	 *  @private */
	string _outputDataName;
	/** Local cached store latitude
	 *  @private */
	decimal _latitude;
	/** Local cached store longitude
	 *  @private */
	decimal _longitude;
	/** Local cached radius
	 *  @private */
	decimal _radius;
	/** Local cached timewindow value
	 *  @private */
	decimal _timewindow;
	/** Local cached smoothingFactor param value
	 *  @private */
	decimal _smoothingFactor;
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** Local cached copy of the original configuration provided
	 *  for the FootFall Analysis Analytic.
	 *  @private */
	Analytic _config;
		
	/** Local cached closure for the initialisation of the 
	 *  FootFall Analysis Analytic.
	 *  @private */
	action<boolean, AnalyticInterface> _initCompleteFootFallAnalysis;

	/** Local cached AnalyticInterface object for the internally
	 *  created Geofence Analytic.
	 *  @private */
	AnalyticInterface _geofenceAnalyticInterface;
	/** Local cached AnalyticInterface object for the internally
	 *  created Mapper Analytic.
	 *  @private */
	AnalyticInterface _mapperAnalyticInterface;
	/** Local cached AnalyticInterface object for the internally
	 *  created Sum Analytic.
	 *  @private */
	AnalyticInterface _sumAnalyticInterface;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
    *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	
	action init(Analytic config, 
	            action<boolean, AnalyticInterface> initComplete) {
		
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [ GEOFENCE_LATITUDE, GEOFENCE_LONGITUDE, GEOFENCE_RADIUS, TIMEWINDOW, SMOOTHING_FACTOR ], 
		                                         [ Constants.DECIMAL, Constants.DECIMAL, Constants.DECIMAL, Constants.DECIMAL, Constants.DECIMAL ], 
		                                         [ true, true, true, false, false ] );

		// Only check the specific params if the validation was okay
		if( result ) then {

			// Cache the input/output channel names
			_inputDataName  := config.inputDataNames[0];
			_outputDataName := config.outputDataNames[0];
			_latitude := config.getDecimal(GEOFENCE_LATITUDE);
			_longitude := config.getDecimal(GEOFENCE_LONGITUDE);
			_radius := config.getDecimal(GEOFENCE_RADIUS);
			_timewindow := config.getOrDecimal(TIMEWINDOW, 0.0d);
			_smoothingFactor := config.getOrDecimal(SMOOTHING_FACTOR, 1.0d);

			// Cache the completion closure action
			_initCompleteFootFallAnalysis := initComplete;
	
			// Cache the original configuration
			_config := config;
			
			dictionary<string, string> _geoFenceParam := new dictionary<string, string>;
			_geoFenceParam.add(GEOFENCE_LATITUDE, _latitude.toString());
			_geoFenceParam.add(GEOFENCE_LONGITUDE, _longitude.toString());
			_geoFenceParam.add(GEOFENCE_RADIUS, _radius.toString());
			_geoFenceParam.add(ENABLE_ENTRY, "true");
			_geoFenceParam.add(ENABLE_EXIT, "true");
			_geoFenceParam.add(USE_HYPERTREE, "false");
			// Create Geofence Analytic using the defined input channel
			// and creating an internal channel for the Geofence.
			(new GeoFence).init( com.industry.analytics.Analytic( GeoFence.NAME, 
			                                                     [_inputDataName ],
																 [ CHANNEL_PREFIX+"_GEOFENCE_"+_outputDataName ], 
			                                                      _geoFenceParam ), 
			                     								_initCompleteGeoFence );
		}
		
		if( not result ) then {
			// Call the closure with an error
			initComplete( false, new AnalyticInterface );
		}
	}
	
	/**
	 *  This action defines the completion handler for the for GeoFence Analytic
	 *  @private */
	action _initCompleteGeoFence( boolean success, AnalyticInterface tInterface ) {
		
		 //If the Geofence Analytic was created successfully
		if( success ) then {
			// Cache the Geofence Analytic interface object 
			_geofenceAnalyticInterface := tInterface;
			
			dictionary<string,string> mapping := new dictionary<string,string>;
			mapping.add(ENTERED,"1.0d");
			if(_timewindow = 0.0d) {
				mapping.add(EXITED,"-1.0d");
			} else {
				mapping.add(EXITED,"0.0d");
			}
			
			dictionary<string, string> _mapperParam := new dictionary<string, string>;
			_mapperParam.add(INPUT_FIELD,S_VALUE);
			_mapperParam.add(OUTPUT_FIELD,D_VALUE);
			_mapperParam.add(MAPPING,mapping.toString());
			// Create Mapper Analytic using the created geofence as input channel 
			// and the internally created Mapper Analytic channel output
			// We pass in all the configuration parameters to ensure 
			// future compatibility with new features of the Analytics
			(new Mapper).init( com.industry.analytics.Analytic( Mapper.NAME, 
			                                                    [ CHANNEL_PREFIX+"_GEOFENCE_"+_outputDataName ], 
			                                                    [ CHANNEL_PREFIX+"_MAPPER_"+_outputDataName ], 
			                                                    _mapperParam ), 
			                   _initCompleteMapper );
		} else {
			log "Error spawning FootFall Analytic - Failed to create the Geofence Analytic part of the chain" at ERROR;
			_initCompleteFootFallAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/**
	 *  This action defines the completion handler for the for Mapper Analytic
	 *  @private */
	action _initCompleteMapper( boolean success, AnalyticInterface tInterface ) {
		
		 //If the Mapper Analytic was created successfully
		if( success ) then {
			// Cache the Mapper Analytic interface object 
			_mapperAnalyticInterface := tInterface;

			dictionary<string, string> _sumParam := new dictionary<string, string>;
			_sumParam.add(CALCULATION_TYPE,TIMEWINDOW);
			if(_timewindow = 0.0d) {
				_sumParam.add(CALCULATION_VALUE,decimal.MAX.toString());
			} else {
				_sumParam.add(CALCULATION_VALUE,_timewindow.toString());
			}
			_sumParam.add(SMOOTHING_FACTOR, _smoothingFactor.toString());
			_sumParam.add(BY_SOURCE_ID,"false");
			// Create Mapper Analytic using the created mapper as input channel 
			// and the internally created Sum Analytic channel output
			// We pass in all the configuration parameters to ensure 
			// future compatibility with new features of the Analytics
			(new Sum).init( com.industry.analytics.Analytic( Sum.NAME, 
			                                                    [ CHANNEL_PREFIX+"_MAPPER_"+_outputDataName ], 
			                                                    [ _outputDataName ], 
			                                                 	_sumParam ), 
			                   _initCompleteSum );
		} else {
			log "Error spawning FootFall Analytic - Failed to create the Mapper Analytic part of the chain" at ERROR;
			_initCompleteFootFallAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/**
	 *  This action defines the completion handler for the for Sum Analytic
	 *  @private */
	action _initCompleteSum( boolean success, AnalyticInterface tInterface ) {
		
		 //If the Sum Analytic was created successfully
		if( success ) then {
			// Cache the Sum Analytic interface object 
			_sumAnalyticInterface := tInterface;
			
			//log "starting interfaces";
			_geofenceAnalyticInterface.start();
			_mapperAnalyticInterface.start();
			_sumAnalyticInterface.start();
			
			 //Create an Analytic object for the FootFall.
			// This is only required to handle the reset/deletion of 
			// the internally created Analytics.
			// There is no need to implement the processData action
			// as the internally created Analytics will handle this.
			_analyticObject := new AnalyticObject;
			_analyticObject.initExtended( _config,
			                              new action<Data>, 
			                              new action<dictionary<string, Data> >,
			                              false,
			                              reset,
			                              onDelete,
			                              _initCompleteFootFallAnalysis );


		
		} else {
			log "Error spawning FootFall Analytic - Failed to create the Sum Analytic part of the chain" at ERROR;
			_initCompleteFootFallAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/**
	 *  Optional action to reset the state of the Analytic instance
	 *  back to its initialisation state.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">reset</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @private
	 */
	action reset() {
		// Reset all the analytics
		_geofenceAnalyticInterface.reset();
		_mapperAnalyticInterface.reset();
		_sumAnalyticInterface.reset();
	}
	
	/**
	 *  Optional action that is called on deleting the Analytic
	 *  instance. This action should clear any local state/listeners
	 *  that have been created by the Analytic instance.
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *
	 *  @private
	 */
	action onDelete() {
		// Stop all the internally created Analytic interfaces
		_geofenceAnalyticInterface.stop();
		_mapperAnalyticInterface.stop();
		_sumAnalyticInterface.stop();

	}
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the FootFall Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternFootFallChannel {
	event StayAlive {}
	
	action onload() {
		string discard := FootFall.NAME.intern();
		discard := FootFall.BY_SOURCE_ID.intern();
		discard := FootFall.CALCULATION_TYPE.intern();
		discard := FootFall.CALCULATION_VALUE.intern();
		discard := FootFall.CHANNEL_PREFIX.intern();
		discard := FootFall.D_VALUE.intern();
		discard := FootFall.ENABLE_ENTRY.intern();
		discard := FootFall.ENABLE_EXIT.intern();
		discard := FootFall.ENTERED.intern();
		discard := FootFall.EXITED.intern();
		discard := FootFall.GEOFENCE_LATITUDE.intern();
		discard := FootFall.GEOFENCE_LONGITUDE.intern();
		discard := FootFall.GEOFENCE_RADIUS.intern();
		discard := FootFall.INPUT_FIELD.intern();
		discard := FootFall.MAPPING.intern();
		discard := FootFall.OUTPUT_FIELD.intern();
		discard := FootFall.S_VALUE.intern();
		discard := FootFall.SMOOTHING_FACTOR.intern();
		discard := FootFall.TIMEWINDOW.intern();
		discard := FootFall.USE_HYPERTREE.intern();
		on all StayAlive() {}
	}
}