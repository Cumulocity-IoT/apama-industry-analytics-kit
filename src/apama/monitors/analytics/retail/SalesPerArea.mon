//*****************************************************************************
// Title:         SalesPerArea
// Description:   SalesPerArea description
// Dependencies:  None
// Author:        ASIN
//
//*****************************************************************************

package com.industry.analytics.retail;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;
using com.industry.analytics.streaming_calculations.Sum;

//TODO: Monitors and event definitions here
/* @AnalyticDefinition
{
	"name": "SalesPerArea",
	"description": "Calculates the sales per area for a store or/and category.",
	"group": "Retail",
	"documentation": "com/industry/analytics/retail/SalesPerArea.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to calculate sales/area",
			"dataProperties": ["dValue"]
		}
	],
	"outputChannels": [
		{
			"name": "SalesPerArea",
			"description": "The channel to output the sales per area for a store or category",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "calculator",
			"description": "Defines the unit of area for a given store or category section.",
			"type": "string",
			"optional": true,
			"defaultValue": "squareMeter",
			"validValues": ["squareMeter", "squareFeet"]
		},{
			"name": "timeWindow",
			"description": "Defines the timewindow for which sales per area is being calculated.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 3600.0,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "smoothingFactor",
			"description": "Defines the smoothing factor to be used for precision.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 60,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "areaValue",
			"description": "Defines the area of store or section based on calculator value (squareMeter or squareFeet).",
			"type": "decimal",
			"optional": false,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "category",
			"description": "Defines the categoryId for which the SalesPerArea calculation is performed.",
			"type": "string",
			"defaultValue": "All",
			"optional": true
		},{
			"name": "store",
			"description": "Defines the storeId for which the SalesPerArea calculation is performed.",
			"type": "string",
			"defaultValue": "All",
			"optional": true
		}
	]
}
*/


/**
*  The SalesPerArea Analytic computation generates a Data event containing the value of sales data per square meter/feet.
*  It does this by calculating the sum of sales figure and then dividing it by the area specifies for a store or section of store. 
*  This Analytic utilizes the Sum analytics internally to do the sum for SalesPerArea calculation.
*  A smoothing factor is used make sum result precise. Larger the number for <font face="courier" size="-1">smoothingFactor</font> better the precision.</br>
*  With the combination of <font face="courier" size="-1">category</font> and <font face="courier" size="-1">store</font> params, 
*  SalesPerArea can calculate sale for all stores, all stores with specific category, 
*  specific store with all categories and specific store with specific category.
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>calculator</b></td><td>Defines the unit of area for a given store or category section.</td>
*      <td><font face="courier" size="-1">squareMeter</font> or <font face="courier" size="-1">squareFeet</font></td>
*						<td>String</td><td>False</td><td><font face="courier" size="-1">squareMeter</font></td></tr>
*  <tr><td><b>areaValue</b></td><td>Defines the area of store/section based on calculator value (squareMeter/squareFeet).</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>True</td><td></td></tr>
*  <tr><td><b>category</b></td><td>Defines the categoryId for which the SalesPerArea calculation is performed.</td>
*      <td>String</td><td>String</td><td>False</td><td><font face="courier" size="-1">All</font></td></tr>
*  <tr><td><b>store</b></td><td>Defines the storeId for which the SalesPerArea calculation is performed.</td>
*     <td>String</td><td>String</td><td>False</td><td><font face="courier" size="-1">All</font></td></tr>
*  <tr><td><b>timewindow</b></td><td>Defines the timewindow (in seconds) for which sales per area is being calculated.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">3600.0d</font> </td></tr>
*  <tr><td><b>smoothingFactor</b></td><td>Defines the smoothing factor to be used for precision calculation.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">60.0d</font></td></tr>
*
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a SalesPerArea Analytic which takes Data events on the channel "Input"  
//and calculate the sales per square meter for all stores and all categories. It publishes
//a Data event with the calculated value of SalesPerArea on the output channel "Output". 
com.industry.analytics.Analytic("SalesPerArea", ["Input"], ["Output"], {"calculation": "squareMeter", "areaValue":"2000","category": "All","store": "All","timeWindow": "60.0", "smoothingFactor":"60.0"})
//For calculating the sales per square meter for all stores and all categories, input Data event should have following :
//The value of SourceId should be StoreId, dValue should contain sales figures in USD (if currency is USD), extraparam can have currency value.
//Example of Input Data event:
com.industry.analytics.Data("Input", "r", "Store_1", 1.0, 1000.0, "", 1.0,2.0, 3.0, {"currency":"USD"})

//Define a SalesPerArea Analytic which takes Data events on the channel "Input"  
//and calculate the sales per square meter for single store and all categories. It publishes
//a Data event with the calculated value of SalesPerArea on the output channel "Output". 
com.industry.analytics.Analytic("SalesPerArea", ["Input"], ["Output"], {"calculation": "squareMeter", "areaValue":"500","category": "All","store": "Store_1","timeWindow": "60.0", "smoothingFactor":"60.0"})
//For calculating the sales per square meter for single stores and all categories, input Data event should have following :
//The value of SourceId should be StoreId for which calculation is done, dValue should contain sales figures in USD (if currency is USD), extraparam can have currency and category value.
//Example of Input Data event:
com.industry.analytics.Data("Input", "r", "Store_1", 1.0, 1000.0, "", 1.0,2.0, 3.0, {"currency":"USD", "category":"cat_1"})

//Define a SalesPerArea Analytic which takes Data events on the channel "Input"  
//and calculate the sales per square meter for single category and all stores. It publishes
//a Data event with the calculated value of SalesPerArea on the output channel "Output". 
com.industry.analytics.Analytic("SalesPerArea", ["Input"], ["Output"], {"calculation": "squareMeter", "areaValue":"500","category": "Cat_1","store": "all","timeWindow": "60.0", "smoothingFactor":"60.0"})
//For calculating the sales per square meter for single stores and all categories, input Data event should have following :
//The value of SourceId should be CategoryId for which calculation is done, dValue should contain sales figures in USD (if currency is USD), extraparam can have currency and store value.
//Example of Input Data event:
com.industry.analytics.Data("Input", "r", "cat_1", 1.0, 1000.0, "", 1.0,2.0, 3.0, {"currency":"USD", "store":"store_1"})

//Define a SalesPerArea Analytic which takes Data events on the channel "Input"  
//and calculate the sales per square meter for a single store and single category. It publishes
//a Data event with the calculated value of SalesPerArea on the output channel "Output". 
com.industry.analytics.Analytic("SalesPerArea", ["Input"], ["Output"], {"calculation": "squareMeter", "areaValue":"500","category": "Cat_1","store": "Store_1","timeWindow": "60.0", "smoothingFactor":"60.0"})
//For calculating the sales per square meter for single stores and all categories, input Data event should have following :
//The value of SourceId should be "StoreId_CategoryId" , dValue should contain sales figures in USD (if currency is USD), extraparam can have currency, category and store value.
//Example of Input Data event:
com.industry.analytics.Data("Input", "r", "Store_1_cat_1", 1.0, 1000.0, "", 1.0,2.0, 3.0, {"currency":"USD", "store":"store_1", "category":"cat_1"})
</code></dd>
*</dl>
*/


event SalesPerArea {
	/** This constant defines the name of the Analytic. */
	constant string NAME := "SalesPerArea";
	/** This constant defines the prefix used for the internal
	 *  channel names.
	 *  @private */
	constant string CHANNEL_PREFIX := "__internalChannel_SALES_PER_AREA";
	/** This constant defines the name of calculator param. */
	constant string CALCULATOR := "calculator";
	/** This constant defines the name of areaValue param. */
	constant string AREA_VALUE := "areaValue";
	/** This constant defines the name of category param. */
	constant string CATEGORY := "category";
	/** This constant defines the name of store param. */
	constant string STORE := "store";
	/** This constant defines the name of timeWindow param. */
	constant string TIMEWINDOW := "timeWindow";
	/**This constant defines the configuration parameter name
	 *  that specifies the smoothing factor used to calculate the sum.*/
	constant string SMOOTHING_FACTOR := "smoothingFactor";

	/**Constant defining calculationType param for Sum Analytic
	* @private */
	constant string CALCULATION_TYPE := "calculationType";
	/**Constant defining calculationValue param for Sum Analytic
	* @private */
	constant string CALCULATION_VALUE := "calculationValue";
	/**Constant defining bySourceId param for Sum Analytic
	* @private */
	constant string BY_SOURCE_ID := "bySourceId";
	/**Constant defining calculator param value for area per square meter
	* @private */
	constant string SQUARE_METER := "squareMeter";
	/**Constant defining calculator param value for area per square feet
	* @private */
	constant string SQUARE_FEET := "squareFeet";
	/**Constant defining default category param value. 
	This will calculate sales per area for all stores/categories. 
	* @private */
	constant string DEFAULT_CATEGORY :="All";
	/**Constant defining default timewindow value of 1 hour for calculation
	* @private */
	constant decimal DEFAULT_TIMEWINDOW := 3600.0d;
	/** Local cached calculator param value
	 *  @private */
	string _calculator;
	/** Local cached areaValue param value
	 *  @private */
	decimal _areaValue;
	/** Local cached category param value
	 *  @private */
	string _category;
	/** Local cached store param value
	 *  @private */
	string _store;
	/** Local cached timeWindow param value
	 *  @private */
	decimal _timeWindow;
	/** Local cached inputChannel param value
	 *  @private */
	string _inputChannel;
	/** Local cached outputChannel param value
	 *  @private */
	string _outputChannel;
	/** Local cached smoothingFactor param value
	 *  @private */
	decimal _smoothingFactor;
	
	/** Local cached closure for the initialisation of the 
	 *  SalesPerArea Analysis Analytic.
	 *  @private */
	action<boolean, AnalyticInterface> _initCompleteSalesPerAreaAnalysis;
	
	/** Local cached AnalyticInterface object for the internally
	 *  created Geofence Analytic.
	 *  @private */
	AnalyticInterface _sumAnalyticInterface;
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** Local cached copy of the original configuration provided
	 *  for the SalesPerArea Analysis Analytic.
	 *  @private */
	Analytic _config;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
   *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	
	action init(Analytic config, 
	            action<boolean, AnalyticInterface> initComplete) {
		
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [TIMEWINDOW, CALCULATOR, AREA_VALUE, CATEGORY, STORE, SMOOTHING_FACTOR], 
		                                         [Constants.DECIMAL, Constants.STRING, Constants.DECIMAL, Constants.STRING, Constants.STRING, Constants.DECIMAL], 
		                                         [false, false, true, false, false, false] );
		if( result ) then {
			//Cache the input/output channel names
			_inputChannel  := config.inputDataNames[0];
			_outputChannel := config.outputDataNames[0];
	
			_timeWindow := config.getOrDecimal( TIMEWINDOW, DEFAULT_TIMEWINDOW );
			if( _timeWindow <= 0.0d ) then {
				log "  Param "+TIMEWINDOW+" must be positive. Given value: " + _timeWindow.toString() at ERROR;
				result := false;
			}
			
			_calculator := config.getOrString(CALCULATOR, SQUARE_METER);
			if not (_calculator.toLower() = SQUARE_METER.toLower() or _calculator.toLower()= SQUARE_FEET.toLower()) {
				log "  Param "+CALCULATOR+" must be either "+SQUARE_METER+" or "+SQUARE_FEET+". Given value: " + _calculator at ERROR;
				result := false;
			}
			
			_areaValue := config.getDecimal(AREA_VALUE);
			if(_areaValue <= 0.0d) {
				log "  Param "+AREA_VALUE+" must be greater than 0.0. Given value: " + _areaValue.toString() at ERROR;
				result := false;
			}
			
			_category := config.getOrString(CATEGORY, DEFAULT_CATEGORY);
			if(_category.ltrim().length() <= 0) {
				log "  Param "+CATEGORY+" must not be empty." at ERROR;
				result := false;
			}
			
			_store := config.getOrString(STORE, DEFAULT_CATEGORY);
			if(_store.ltrim().length() <= 0) {
				log "  Param "+STORE+" must not be empty." at ERROR;
				result := false;
			}
			
			_smoothingFactor := config.getOrDecimal(SMOOTHING_FACTOR, 60.0d);
			if _smoothingFactor > _timeWindow then
			{
				log "Parameter "+SMOOTHING_FACTOR+" value "+_smoothingFactor.toString()+" is greater than "+TIMEWINDOW+
				". Using "+TIMEWINDOW+" value "+_timeWindow.toString()+" as default." at WARN;
				_smoothingFactor := _timeWindow;
			}
			
			// Cache the original configuration
			_config := config.clone();
			
			_initCompleteSalesPerAreaAnalysis := initComplete;
			if (result) {
				dictionary<string, string> _sumParam := new dictionary<string, string>;
				_sumParam.add(CALCULATION_TYPE,TIMEWINDOW);
				if(_timeWindow = 0.0d) {
					_sumParam.add(CALCULATION_VALUE,decimal.MAX.toString());
				} else {
					_sumParam.add(CALCULATION_VALUE,_timeWindow.toString());
				}
				_sumParam.add(SMOOTHING_FACTOR, _smoothingFactor.toString());
				if(_category.toLower() = DEFAULT_CATEGORY.toLower() 
						and _store.toLower() = DEFAULT_CATEGORY.toLower()) {
					_sumParam.add(BY_SOURCE_ID,"false");
				}else {
					_sumParam.add(BY_SOURCE_ID,"true");
				}
				// Create Sum Analytic using the internally created Sum Analytic channel output
				// We pass in all the configuration parameters to ensure 
				// future compatibility with new features of the Analytics
				(new Sum).init( com.industry.analytics.Analytic( Sum.NAME, 
				                                                    [ _inputChannel ], 
				                                                    [ CHANNEL_PREFIX+"_SUM_"+_outputChannel ], 
				                                                 	_sumParam ), 
				                   _initCompleteSum );
			}
			
		}
		
		if( not result ) then {
			// Call the closure with an error
			initComplete( false, new AnalyticInterface );
		}
	}
	
	/**
	 *  This action defines the completion handler for the for Sum Analytic
	 *  @private */
	action _initCompleteSum( boolean success, AnalyticInterface tInterface ) {
		 //If the Sum Analytic was created successfully
		if( success ) then {
			// Cache the Sum Analytic interface object 
			_sumAnalyticInterface := tInterface;
			
			_sumAnalyticInterface.start();
			_config.inputDataNames :=[CHANNEL_PREFIX+"_SUM_"+_outputChannel];
			
			 //Create an Analytic object for the SalesPerArea.
			// This is only required to handle the reset/deletion of 
			// the internally created Analytics.
			// There is no need to implement the processData action
			// as the internally created Analytics will handle this.
			_analyticObject := new AnalyticObject;
			_analyticObject.initExtended( _config,
			                              processData, 
			                              new action<dictionary<string, Data> >,
			                              false,
			                              reset,
			                              onDelete,
			                              _initCompleteSalesPerAreaAnalysis );


		
		} else {
			log "Error spawning SalesPerArea Analytic - Failed to create the Sum Analytic part of the chain" at ERROR;
			_initCompleteSalesPerAreaAnalysis( false, new AnalyticInterface );
			return;
		}
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		return true;
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn) {

		log "dataIn : "+dataIn.toString() at DEBUG;
		if(_store.toLower() = DEFAULT_CATEGORY.toLower() and _category.toLower() = DEFAULT_CATEGORY.toLower()) {
			//SalesperArea for all stores and all categories
			calculateAreaAndSend(dataIn.clone());
			
		} else if (not _store.toLower() = DEFAULT_CATEGORY.toLower()) and _category.toLower() = DEFAULT_CATEGORY.toLower()  {
			//SalesperArea for single store and all categories
			if(dataIn.sourceId.toLower() = _store.toLower()) {
				//only do calculation for configured store
				calculateAreaAndSend(dataIn.clone());
			}
		} else if (_store.toLower() = DEFAULT_CATEGORY.toLower() and not _category.toLower() = DEFAULT_CATEGORY.toLower()) {
			//SalesperArea for all stores and single category
			if(dataIn.sourceId.toLower() = _category.toLower()) {
				//only do calculation for configured category
				calculateAreaAndSend(dataIn.clone());
			}
		}else if (not _store.toLower() = DEFAULT_CATEGORY.toLower() and not _category.toLower() = DEFAULT_CATEGORY.toLower()) {
			//SalesperArea for single store and single category
			if(dataIn.sourceId.toLower() = _store.toLower()+"_"+_category.toLower()) {
				//only do calculation for configured category and configured store
				calculateAreaAndSend(dataIn.clone());
			}
		}
		
	}
	
	/**
	 *  This action alculate the area and send data to output stream
	 *  @private */
	action calculateAreaAndSend(Data data) {
		data.dValue := data.dValue/_areaValue;
		data.streamName := _outputChannel;
		data.params.add(CALCULATOR,_calculator);
		send data to data.streamName;
	}
	
	/**
	 *  Optional action to reset the state of the Analytic instance
	 *  back to its initialisation state.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">reset</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @private
	 */
	action reset() {
		// Reset all the analytics
		_sumAnalyticInterface.reset();
	}
	
	/**
	 *  Optional action that is called on deleting the Analytic
	 *  instance. This action should clear any local state/listeners
	 *  that have been created by the Analytic instance.
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *
	 *  @private
	 */
	action onDelete() {
		// Stop all the internally created Analytic interfaces
		_sumAnalyticInterface.stop();

	}
	
}
/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the SalesPerArea Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternSalesPerArea {
	event StayAlive {}
	
	action onload()	{
		string discard := SalesPerArea.NAME.intern();
		discard := SalesPerArea.TIMEWINDOW.intern();
		discard := SalesPerArea.SMOOTHING_FACTOR.intern();
		discard := SalesPerArea.CHANNEL_PREFIX.intern();
		discard := SalesPerArea.CALCULATOR.intern();
		discard := SalesPerArea.AREA_VALUE.intern();
		discard :=SalesPerArea.CATEGORY.intern();
		discard :=SalesPerArea.STORE.intern();
		discard := SalesPerArea.CALCULATION_TYPE.intern();
		discard := SalesPerArea.CALCULATION_VALUE.intern();
		discard := SalesPerArea.BY_SOURCE_ID.intern();
		discard := SalesPerArea.SQUARE_METER.intern();
		discard := SalesPerArea.SQUARE_FEET.intern();
		discard :=SalesPerArea.DEFAULT_CATEGORY.intern();
		on all StayAlive() {}
	}
}