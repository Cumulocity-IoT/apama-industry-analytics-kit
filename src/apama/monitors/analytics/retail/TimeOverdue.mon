//*****************************************************************************
// Title: Performance Analytic implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics.retail;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;

using com.industry.utils.Bucket;
using com.industry.utils.BucketSystem;
using com.industry.utils.BucketSystemBuilder;

using com.apama.exceptions.Exception;

/* @AnalyticDefinition
{
	"name": "TimeOverdue",
	"description": "Calculate how late an arival is.",
	"group": "Retail",
	"documentation": "com/industry/analytics/retail/TimeOverdue.html",
	"inputChannels": [
		{
			"name": "ETA Updates",
			"description": "The channel containing the ETA for the journey",
			"dataProperties": ["dValue"]
		},{
			"name": "Arrival",
			"description": "The channel containing the 'Journey Completed' events"
		}

	],
	"outputChannels": [
		{
			"name": "TimeOverdue",
			"description": "The duration in seconds that the arrival was overdue",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "ignoreEarly",
			"description": "Only send the output when the arrival is late.",
			"type": "boolean",
			"defaultValue": "true"
		},{
			"name": "bySourceId",
			"description": "Link ETA and Arrival by sourceId, calculating a separate TimeOverdue for each.",
			"type": "boolean",
			"defaultValue": true,
			"optional": true,
			"advanced": true
		},{
            "name": "managementId",
            "description": "The id used for management of the analytic",
            "type": "string",
            "optional": true,
            "advanced": true
        }
	]
}
*/
/**
 *  The TimeOverdue Analytic calculates the duration that an arrival is overdue.
 *
 *  The anlytic will only output when it receives a arrival event.
 *
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>2 input Data stream name must be provided. The first being the "ETA" events, containing a dValue with the timestamp (in Seconds from epoch) that the arival event is expected by. The second is the Arrival events, which do not need to contain anything (except the timestamp).</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>Only a single output Data stream name must be provided.</dd>
 * 	<dd>Contains the calculated TimeOverdue (in seconds). (All other fields from the triggering data event (Either the eta or the arrival event) are copied)</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  <tr><td><b>ignoreEarly</b></td><td>Only send the output when the arrival is late.</td>
 *      <td></font></td><td>Boolean</td><td>True</td><td></td></tr>
 *  <tr><td><b>bySourceId</b></td><td>Use the sourceId to determine which eta matches which arrival, otherwise any arrival will terminate any eta</td>
 *      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
 *  </table></dd>
 *  </dl>
 *  <dl><dt><b>Example usage:</b></dt>
 <dd><code>
// Create a TimeOverdue Analytic which takes eta updates on the channel "ETA" and arrivals on the "Arrival" channel  
// It outputs to the channel "TimeOverdueOutput".
send com.industry.analytics.Analytic("TimeOverdue", ["ETA", "Arrival"], ["TimeOverdueOutput"], new dictionary<string, string> ) to "";
</code></dd>
 *</dl>
 */
event TimeOverdue {
	/** The name of the analytic. */
	constant string NAME := "TimeOverdue";

	constant string IGNORE_EARLY := "ignoreEarly";
	
	constant string BY_SOURCEID := "bySourceId";
	
	constant string INTERNAL_SOURCEID := "__internal_shared_sourceId";
		
	/** @private */
	string _outputStreamName;
	
	string _arrivalStreamName;

	boolean _ignoreEarly;
	boolean _bySourceId;

	dictionary<string, decimal> _etaBySourceId;

	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;

	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analytic.
	 */
	action init(Analytic config, action<boolean, AnalyticInterface> initComplete) {
		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration(Analytic config) returns boolean {
		boolean result := config.validateParams( NAME, 2, 1, 
		                                       [ IGNORE_EARLY, BY_SOURCEID ],
		      		                           [ Constants.BOOLEAN, Constants.BOOLEAN ],
		      		                           [ false, false ] );
		
		// Only check the specific params if the validation was okay
		if result {
			_arrivalStreamName := config.inputDataNames[1];
			
			_outputStreamName := config.outputDataNames[0];
			
			_ignoreEarly := config.getOrBoolean(IGNORE_EARLY, true);
			
			_bySourceId := config.getOrBoolean( BY_SOURCEID, true );
		}

		return result;
	}
	
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn) {
		log "Processing " + dataIn.toString() at DEBUG;
		
		string sourceId := getSourceId(dataIn);

		if dataIn.streamName = _arrivalStreamName {
			decimal eta;
			if _etaBySourceId.hasKey(sourceId) {
				 eta := _etaBySourceId[sourceId];
				_etaBySourceId.remove(sourceId);
			} else {
				 eta := dataIn.timestamp;
			}

			decimal timeOverdue := dataIn.timestamp - eta;
			
			if not _ignoreEarly or timeOverdue > 0.0d {
				Data dataOut := dataIn.clone();
				
				dataOut.dValue := timeOverdue;
				
				dataOut.streamName := _outputStreamName;
		      	if dataOut.type = DataConstants.RAW {
		      		dataOut.type := DataConstants.COMPUTED;
		      	}
				_analyticObject.sendData(dataOut);
			}
		} else {
			_etaBySourceId.add(sourceId, dataIn.dValue);			
		}
	}
	
	action getSourceId(Data d) returns string {
		if _bySourceId {
			return d.sourceId;
	    } else {
	    	return INTERNAL_SOURCEID;
	    }
	}
	
	action reset() {
		_etaBySourceId.clear();
	}
}
