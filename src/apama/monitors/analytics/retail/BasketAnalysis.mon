package com.industry.analytics.retail;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;
using com.industry.analytics.TimeWeightedMovingAverage;

/* @AnalyticDefinition
{
	"name": "BasketAnalysis",
	"description": "Calculates the average value and number of items in a shopping basket within a timewindow.",
	"group": "retail",
	"documentation": "com/industry/analytics/retail/BasketAnalysis.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to check",
			"dataProperties": ["dValue", "xValue", "yValue", "zValue"]
		}
	],
	"outputChannels": [
		{
			"name": "AverageData",
			"description": "The channel on which to output the average values",
			"dataProperties": ["dValue", "xValue", "yValue", "zValue"]
		}
	],
	"properties": [
		{
			"name": "timeWindow",
			"description": "Defines the timewindow for calculating the average value and quantity of orders",
			"type": "decimal",
			"optional": true,
			"defaultValue": 600.0,
			"validator": "function(value) { return value >= 0 || 'Value must be greater than or equal to 0' }",
			"postfix": "(Seconds)"
		},{
			"name": "valueParam",
			"description": "Defines the data parameter to be used for order value. Output avegare value will be save in same param",
			"type": "string",
			"validValues": ["dValue", "xValue", "yValue", "zValue"],
			"optional": true,
			"defaultValue": "dValue"
		},{
			"name": "sizeParam",
			"description": "Defines the data parameter to be used for order quantity. Output avegare value will be save in same param",
			"type": "string",
			"validValues": ["dValue", "xValue", "yValue", "zValue"],
			"optional": true,
			"defaultValue": "xValue"
		},{
			"name": "bySourceId",
			"description": "Defines if the calculation is done on the basis of sourceId.",
			"type": "boolean",
			"optional": true,
			"defaultValue": true
			
		}
	]
}
*/
/**
*  The BasketAnalysis Analytic generates Data containing the average basket size and value.
*  The computation looks for data event containing total order sale value and item quantity. 
*  It then calculate the time weighted moving average of order sale value and item quantity. 
*  The calculated data is immediately reported on specified output channel.	
*  The store Id can be used as sourceId of Data event. If bySourceId attribute is set to true, 
*  then BasketAnalysis will be done store specific else company wide.
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Only one input Data stream names must be provided.</dd>
*  <dd>The stream will always provide the data to be calculated and is mandatory.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Data events containing Basket Analysis is generated.  All the
*      <font face="courier" size="-1">params</font> from the input Data are copied to the output Data.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>timeWindow</b></td><td>Defines time window to do calculation of basket analysis</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">600.0d</font></td></tr>
*  <tr><td><b>valueParam</b></td><td>Defines the Data param which holds order total value</td>
*      <td><font face="courier" size="-1">dValue</font>, <font face="courier" size="-1">xValue</font>, <font face="courier" size="-1">yValue</font> or 
*			<font face="courier" size="-1">zValue</font>
*		</td><td>String</td><td>False</td><td><font face="courier" size="-1">dValue</font></td></tr>
*  <tr><td><b>sizeParam</b></td><td>Defines the Data param which holds number of items in an order</td>
*      <td><font face="courier" size="-1">dValue</font>, <font face="courier" size="-1">xValue</font>, <font face="courier" size="-1">yValue</font> or 
*			<font face="courier" size="-1">zValue</font></td>
*      <td>String</td><td>False</td><td><font face="courier" size="-1">xValue</font></td></tr>
*  <tr><td><b>bySourceId</b></td><td>If defined, the BasketAnalysis calculations are partitioned based on the sourceId of the Data events.</td>
*      <td><font face="courier" size="-1">true</font> or <font face="courier" size="-1">false</font></td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
// Define input Data events on the channel "Input1" with order value saved in dValue and order item size in xValue
// and generate Data event after analysis on the channel "Output1".  
send com.industry.analytics.Analytic("BasketAnalysis", ["Input1"], ["Output1"], {"timeWindow":"540.0"} ) to "";
  
//Define input Data events on the channel "Input2" with order value saved in xValue and order item size in yValue
//and generate Data event after analysis on the channel "Output2".  
send com.industry.analytics.Analytic("BasketAnalysis", ["Input2"], ["Output2"], {"valueParam":"xValue","sizeParam":"yValue"} ) to "";
</code></dd>
*  </dl>
*/


event BasketAnalysis
{
	/** This constant defines the name of the Analytic. */
	constant string NAME := "BasketAnalysis";
	
	/** This constant defines the configuration parameter name
	 *  that specifies the time window to calculate the basket 
	 *  average over */
	constant string TIMEWINDOW := "timeWindow";
	
	/** This constant defines the configuration parameter name
	 *  that specifies the Data param to use as Order value to 
	 *  calculate average */
	constant string VALUE_PARAM := "valueParam";
	
	/** This constant defines the configuration parameter name
	 *  that specifies the Data param to use as Order size (no. of items) to 
	 *  calculate average */
	constant string SIZE_PARAM := "sizeParam";
	
	/** This constant defines the configuration parameter name
	 *  that defines whether or not the calculation will be
	 *  partitioned by the <font face="courier" size="-1">sourceId</font>*/
	constant string BY_SOURCEID := "bySourceId";
	
	/** This constant defines the internal name used to define "all sourceIds"
	 *  used when not partitioning by sourceId.
	 *  @private */
	constant string CONST_INTERNAL_ALL_SOURCES := "__internalSourceIdWildcard";
	
	/** Local cached input channel name for Value data
	 *  @private */
	string _inputChannel;
	
	/** Local cached output channel name
	 *  @private */
	string _outputChannel;
	
	/** Local cached dictionary of the moving average of order value, keyed by
	 *  the sourceId.
	 *  @private */
	dictionary<string /*sourceId*/, TimeWeightedMovingAverage> _valueMovingAverages;
	
	/** Local cached dictionary of the moving average of order size, keyed by
	 *  the sourceId.
	 *  @private */
	dictionary<string /*sourceId*/, TimeWeightedMovingAverage> _sizeMovingAverages;
	
	/** Local cached value for the timeWindow configuration parameter value
	 *  @private */
	decimal _timeWindow;
	/** Local cached value for if we are partioning by the sourceId
	 *  @private */
	boolean _bySourceId;
	/** Local cached value for Data param used as order value
	 *  @private */
	string _valueParam;
	/** Local cached value for Data param used as order size/number of items
	 *  @private */
	string _sizeParam;

	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
    *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	
	action init(Analytic config, 
	            action<boolean, AnalyticInterface> initComplete) {
		
		if( not _validateConfiguration( config ) ) then {
			initComplete( false, new AnalyticInterface );
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.init( config,
		                      processData,
		                      reset,
		                      initComplete );
	}
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analytic.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analytic configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration( Analytic config ) returns boolean {
		boolean result := config.validateParams( NAME, 1, 1, 
		                                         [TIMEWINDOW, BY_SOURCEID, VALUE_PARAM, SIZE_PARAM], 
		                                         [Constants.DECIMAL, Constants.BOOLEAN, Constants.STRING, Constants.STRING], 
		                                         [false, false, false, false] );

		// Only check the specific params if the validation was okay
		if( result ) then {
			// Cache the input/output channel names
			_outputChannel := config.outputDataNames[0];
	
			_timeWindow := config.getOrDecimal( TIMEWINDOW, 600.0d );
			if( _timeWindow <= 0.0d ) then {
				log "  Param timeWindow must be positive. Given value: " + _timeWindow.toString() at ERROR;
				result := false;
			}
			
			_bySourceId := config.getOrBoolean( BY_SOURCEID, true );
			
			_valueParam := config.getOrString(VALUE_PARAM, "dValue").toLower();
			
			if(_valueParam != Constants.DVALUE and 
					_valueParam != Constants.XVALUE and 
					_valueParam != Constants.YVALUE and 
					_valueParam != Constants.ZVALUE) {
				log "Param "+VALUE_PARAM+" must be one of the following : dValue, xValue, yValue or zValue." at ERROR;
				result := false;
			}
			
			_sizeParam := config.getOrString(SIZE_PARAM, "xValue").toLower();
			if(_sizeParam != Constants.DVALUE and 
					_sizeParam != Constants.XVALUE and 
					_sizeParam != Constants.YVALUE and 
					_sizeParam != Constants.ZVALUE) {
				log "Param "+SIZE_PARAM+" must be one of the following : dValue, xValue, yValue or zValue." at ERROR;
				result := false;
			} else if(_sizeParam = _valueParam) {//_sizeParam and _valueParam value are same then flag error
				log "Param "+VALUE_PARAM+" and "+SIZE_PARAM+" can not have same value." at ERROR;
				result := false;
			}
		}
		
		return result;
	}


	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn) {
		log "Processing " + dataIn.toString() at DEBUG;
		
		// If we are using the optional parameter to partition based
		// on the sourceId parameter
		string sourceId := dataIn.sourceId;
		if( not _bySourceId ) then {
			sourceId := CONST_INTERNAL_ALL_SOURCES;
		}
		
		calculateAverage(_valueMovingAverages, dataIn, _valueParam, sourceId);
		
		calculateAverage(_sizeMovingAverages, dataIn, _sizeParam, sourceId);
		
		// generate output data event
		Data dataOut := dataIn.clone();
		dataOut.streamName := _outputChannel;
		dataOut.type       := DataConstants.COMPUTED;
		//Add average Value of basket
		if(_valueParam = Constants.DVALUE) {
			dataOut.dValue     := _valueMovingAverages[ sourceId ].eMa();
		}else if(_valueParam = Constants.XVALUE) {
			dataOut.xValue     := _valueMovingAverages[ sourceId ].eMa().toFloat();
		}else if(_valueParam = Constants.YVALUE) {
			dataOut.yValue     := _valueMovingAverages[ sourceId ].eMa().toFloat();
		}else if(_valueParam = Constants.ZVALUE) {
			dataOut.zValue     := _valueMovingAverages[ sourceId ].eMa().toFloat();
		}
		
		//Add average Size of basket
		if(_sizeParam = Constants.DVALUE) {
			dataOut.dValue     := _sizeMovingAverages[ sourceId ].eMa();
		}else if(_sizeParam = Constants.XVALUE) {
			dataOut.xValue     := _sizeMovingAverages[ sourceId ].eMa().toFloat();
		}else if(_sizeParam = Constants.YVALUE) {
			dataOut.yValue     := _sizeMovingAverages[ sourceId ].eMa().toFloat();
		}else if(_sizeParam = Constants.ZVALUE) {
			dataOut.zValue     := _sizeMovingAverages[ sourceId ].eMa().toFloat();
		}
		
		_analyticObject.sendData( dataOut );
		
	}
	
	/**
	* This action initialize and update  TimeWeightedMovingAverage for each data input based on its source id
	* @private
	*/
	action calculateAverage(dictionary<string, TimeWeightedMovingAverage> _movingAverages, 
	                        Data dataIn,
	                        string paramToUse,
	                        string sourceId) {
		if( _movingAverages.hasKey( sourceId ) ) then {
			//check which param to use in calculation
			if(paramToUse = Constants.DVALUE) {
				_movingAverages[ sourceId ].update( dataIn.dValue, dataIn.timestamp );
			} else if(paramToUse = Constants.XVALUE) {
				_movingAverages[ sourceId ].update( dataIn.xValue.toDecimal(), dataIn.timestamp );
			}else if(paramToUse = Constants.YVALUE) {
				_movingAverages[ sourceId ].update( dataIn.yValue.toDecimal(), dataIn.timestamp );
			}else if(paramToUse = Constants.ZVALUE) {
				_movingAverages[ sourceId ].update( dataIn.zValue.toDecimal(), dataIn.timestamp );
			}
		} else {
			TimeWeightedMovingAverage ma := new TimeWeightedMovingAverage;
			
			if(paramToUse = Constants.DVALUE) {
				ma.init( dataIn.dValue, dataIn.timestamp, _timeWindow );
			} else if(paramToUse = Constants.XVALUE) {
				ma.init( dataIn.xValue.toDecimal(), dataIn.timestamp, _timeWindow );
			}else if(paramToUse = Constants.YVALUE) {
				ma.init( dataIn.yValue.toDecimal(), dataIn.timestamp, _timeWindow );
			}else if(paramToUse = Constants.ZVALUE) {
				ma.init( dataIn.zValue.toDecimal(), dataIn.timestamp, _timeWindow );
			}
			_movingAverages[ sourceId ] := ma;
		}
	}
	
	/**
	*  Optional action to reset the state of the Analytic instance
	*  back to its initialisation state.
	*  If the application has created this Analytic using the 
	*  #init() action directly, then the <font face="courier" size="-1">reset</font>
	*  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	*  that was returned should be used instead.
	*
	*  @private
	*/
	action reset() {
		// Reset the values
		_valueMovingAverages.clear();
		_sizeMovingAverages.clear();
	}
}



/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the Combiner Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternBasketAnalysisChannel {
	event StayAlive {}
	
	action onload() {
		string discard := BasketAnalysis.NAME.intern();
		discard := BasketAnalysis.BY_SOURCEID.intern();
		discard := BasketAnalysis.CONST_INTERNAL_ALL_SOURCES.intern();
		discard := BasketAnalysis.SIZE_PARAM.intern();
		discard := BasketAnalysis.VALUE_PARAM.intern();
		discard := BasketAnalysis.TIMEWINDOW.intern();
		on all StayAlive() {}
	}
}