//*****************************************************************************
// Title:         CategoryContribution
// Description:   CategoryContribution description
// Dependencies:  None
// Author:        
//
//*****************************************************************************
package com.industry.analytics.retail;

using com.industry.analytics.Data;
using com.industry.analytics.DataConstants;
using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticObject;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.Constants;
using com.industry.analytics.streaming_calculations.Sum;

/* @AnalyticDefinition
{
	"name": "CategoryContribution",
	"description": "Calculates the total sales for a category.",
	"group": "Retail",
	"documentation": "com/industry/analytics/retail/CategoryContribution.html",
	"inputChannels": [
		{
			"name": "Data",
			"description": "The channel to calculate total sales for a category",
			"dataProperties": ["dValue"]
		},
		{
			"name": "Configuration",
			"description": "The channel to configure products-category relationship",
			"dataProperties": ["sValue"]
		}
	],
	"outputChannels": [
		{
			"name": "CategoryContribution",
			"description": "The channel to output the total sales for category",
			"dataProperties": ["+dValue"]
		}
	],
	"properties": [
		{
			"name": "ignoreUnknown",
			"description": "Ignore products which does not have category information available yet.",
			"type": "boolean",
			"optional": true,
			"defaultValue": "true"
		},{
			"name": "timeWindow",
			"description": "Defines the timewindow for which sales is being calculated.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 3600.0,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		},{
			"name": "smoothingFactor",
			"description": "Defines the smoothing factor to be used for precision.",
			"type": "decimal",
			"optional": true,
			"defaultValue": 60,
			"validator": "function(value) { return value > 0 || 'Must be greater than 0' }"
		}
	]
}
*/

/**
*  The CategoryContribution Analytic computation the total sales for each category listed by Data event.
*  It does this by calculating the sum of sales figure for all the products which belong to same category. 
*  This Analytic utilizes the Sum analytics internally to do the sum for CategoryContribution calculation.
*  A smoothing factor is used make sum result precise. Larger the number for <font face="courier" size="-1">smoothingFactor</font> better the precision.</br>
*  Separate input data stream is used to cache information regarding product categories.
*
*  <dl><dt><b>Input Data events:</b></dt>
*  <dd>Two input Data stream names must be provided.</dd>
*  <dd><b>Note:</b> The input Data events timestamp value should be defined as the number of seconds since the epoch (1st January 1970).</dd>
*  </dl>
*  <dl><dt><b>Output Data events:</b></dt>
*  <dd>Only a single output Data stream name must be provided. Only Data events of Computed type are generated.</dd>
*  </dl>
*  <dl><dt><b>Params:</b></dt>
*  <dd>
*  <table border="1" style="border-collapse: collapse;width:100%">
*  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
*  <tr><td><b>ignoreUnknown</b></td><td>Ignore products which does not have category information available yet.</td>
*     <td>Stringified boolean</td><td>Boolean</td><td>False</td><td><font face="courier" size="-1">true</font></td></tr>
*  <tr><td><b>timewindow</b></td><td>Defines the timewindow (in seconds) for which sales is being calculated.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">3600.0d</font> </td></tr>
*  <tr><td><b>smoothingFactor</b></td><td>Defines the smoothing factor to be used for precision calculation.</td>
*      <td>Stringified decimal</td><td>Decimal</td><td>False</td><td><font face="courier" size="-1">60.0d</font></td></tr>
*
*  </table></dd>
*  </dl>
*  <dl><dt><b>Example usage:</b></dt>
<dd><code>
//Define a CategoryContribution Analytic which takes Data events on the channel "Input" and configuration events on "Input_Category" channel
//and calculate the sales per category. It publishes
//a Data event with the calculated value of CategoryContribution on the output channel "Output". 
com.industry.analytics.Analytic("CategoryContribution", ["Input","Input_Category"], ["Output"], {"ignoreUnknown": "true","timeWindow": "60.0", "smoothingFactor":"60.0"})
//Example of Data event containing product category (sValue) information:

com.industry.analytics.Data("Input_Category", "r", "product_1", 1.0, 1000.0, "category_1", 1.0,2.0, 3.0, {})

//Example of Input Data event containing product sale:

com.industry.analytics.Data("Input", "r", "product_1", 2.0, 3000.0, "", 1.0,2.0, 3.0, {"currency":"USD"})
</code></dd>
*</dl>
*/

event CategoryContribution{
	
	/** This constant defines the name of the Analytic. */
	constant string NAME := "CategoryContribution";
	
	/** This constant defines the prefix used for the internal
	 *  channel names.
	 *  @private */
	constant string CHANNEL_PREFIX := "__internalChannel_CATEGORY_CONTRIBUTION";
	
	/** This constant defines the name of timeWindow param. */
	constant string TIMEWINDOW := "timeWindow";
	
	/**This constant defines the configuration parameter name
	 *  that specifies the smoothing factor used to calculate the sum.*/
	constant string SMOOTHING_FACTOR := "smoothingFactor";
	
	/**This constant defines the configuration parameter name
	 *  that specifies ignoring products which belong to unknown category.*/
	constant string IGNORE_UNKNOWN := "ignoreUnknown";
	
	/**Constant defining calculationType param for Sum Analytic
	* @private */
	constant string CALCULATION_TYPE := "calculationType";
	/**Constant defining calculationValue param for Sum Analytic
	* @private */
	constant string CALCULATION_VALUE := "calculationValue";
	/**Constant defining bySourceId param for Sum Analytic
	* @private */
	constant string BY_SOURCE_ID := "bySourceId";
	
	/**Constant defining unknown Category
	* @private */
	constant string UNKNOWN_CATEGORY := "unknownCategory";
	
	/**Constant defining default timewindow value of 1 hour for calculation
	* @private */
	constant decimal DEFAULT_TIMEWINDOW := 3600.0d;
	
	/** Local cached closure for the initialisation of the 
	 *  CategoryContribution Analysis Analytic.
	 *  @private */
	action<boolean, AnalyticInterface> _initCompleteCategoryContribution;
	
	/** Local cached input channel name 
	 *  @private */
	string _inputChannel;
	
	/** Local cached input channel name for product category data
	 *  @private */
	string _inputChannelCat;
	
	/** Local cached output channel name
	 *  @private */
	string _outputChannel;
	/** Local cached value for the timeWindow configuration parameter value
	 *  @private */
	decimal _timeWindow;
	/** Local cached value for if we are ignoring products which belong to unknown category
	 *  @private */
	boolean _ignoreUnknown;
	/** Local cached smoothingFactor param value
	 *  @private */
	decimal _smoothingFactor;
	
	/** Local cached AnalyticInterface object for the internally
	 *  created Sum Analytic.
	 *  @private */
	AnalyticInterface _sumAnalyticInterface;
	
	/** The Analytic Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	
	/** Local cached copy of the original configuration provided
	 *  for the CategoryContribution Analysis Analytic.
	 *  @private */
	Analytic _config;
	
	/**Dictionary to cache categoryId of a product
	* @private
	*/
	dictionary <string/*productId*/, string/*categoryId*/> _productCategories;
	
	/** 
	 *  This action creates a new instance of the Analytic.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analytic.
	 *
	 *  @param  config        The Analytic configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analytic  
	 *                        has been created, or if an error occured.
  *
	 *  @see com.industry.analytics.Analytic           The Analytic configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                                 to interact with the Analytic.
	 */
	
	action init(Analytic config, 
	            action<boolean, AnalyticInterface> initComplete) {
		
		boolean result := config.validateParams( NAME, 2, 1, 
		                                         [TIMEWINDOW, SMOOTHING_FACTOR, IGNORE_UNKNOWN], 
		                                         [Constants.DECIMAL, Constants.DECIMAL, Constants.BOOLEAN], 
		                                         [false, false, false] );
		if( result ) then {
			if(config.inputDataNames.size() < 2) {
				result := false;
			}
			if(result) {
				//Cache the input/output channel names
				_inputChannel  := config.inputDataNames[0];
				_inputChannelCat := config.inputDataNames[1];
				_outputChannel := config.outputDataNames[0];
			}
			
	
			if(result) {
			_timeWindow := config.getOrDecimal( TIMEWINDOW, DEFAULT_TIMEWINDOW );
				if(_timeWindow <= 0.0d ) then {
					log "  Param "+TIMEWINDOW+" must be positive. Given value: " + _timeWindow.toString() at ERROR;
					result := false;
				}
			}
			
			if(result) {
				_smoothingFactor := config.getOrDecimal(SMOOTHING_FACTOR, 60.0d);
				if _smoothingFactor > _timeWindow then
				{
					log "Parameter "+SMOOTHING_FACTOR+" value "+_smoothingFactor.toString()+" is greater than "+TIMEWINDOW+
					". Using "+TIMEWINDOW+" value "+_timeWindow.toString()+" as default." at WARN;
					_smoothingFactor := _timeWindow;
				}
		
				_ignoreUnknown := config.getOrBoolean(IGNORE_UNKNOWN, true);
			
				// Cache the original configuration
				_config := config.clone();
				
				_initCompleteCategoryContribution := initComplete;
			
				dictionary<string, string> _sumParam := new dictionary<string, string>;
				_sumParam.add(CALCULATION_TYPE,TIMEWINDOW);
				if(_timeWindow = 0.0d) {
					_sumParam.add(CALCULATION_VALUE,decimal.MAX.toString());
				} else {
					_sumParam.add(CALCULATION_VALUE,_timeWindow.toString());
				}
				_sumParam.add(SMOOTHING_FACTOR, _smoothingFactor.toString());

				_sumParam.add(BY_SOURCE_ID,"true");

				// Create Sum Analytic using the internally created Sum Analytic channel output
				// We pass in all the configuration parameters to ensure 
				// future compatibility with new features of the Analytics
				(new Sum).init( com.industry.analytics.Analytic( Sum.NAME, 
				                                                    [ CHANNEL_PREFIX+"_SUM_"+_inputChannel ], 
				                                                    [_outputChannel ], 
				                                                 	_sumParam ), 
				                   _initCompleteSum );
			}
			
		}
		
		if( not result ) then {
			// Call the closure with an error
			initComplete( false, new AnalyticInterface );
		}
	}
	
	/**
	 *  This action defines the completion handler for the for Sum Analytic
	 *  @private */
	action _initCompleteSum( boolean success, AnalyticInterface tInterface ) {
		 //If the Sum Analytic was created successfully
		if( success ) then {
			// Cache the Sum Analytic interface object 
			_sumAnalyticInterface := tInterface;
			
			_sumAnalyticInterface.start();
			_config.inputDataNames :=[_inputChannel, _inputChannelCat];
			_productCategories := new dictionary<string,string>;
			
			 //Create an Analytic object for the CategoryContribution.
			// This is only required to handle the reset/deletion of 
			// the internally created Analytics.
			// There is no need to implement the processData action
			// as the internally created Analytics will handle this.
			_analyticObject := new AnalyticObject;
			_analyticObject.initExtended( _config,
			                              processData, 
			                              new action<dictionary<string, Data> >,
			                              false,
			                              reset,
			                              onDelete,
			                              _initCompleteCategoryContribution );


		
		} else {
			log "Error spawning CategoryContribution Analytic - Failed to create the Sum Analytic part of the chain" at ERROR;
			_initCompleteCategoryContribution( false, new AnalyticInterface );
			return;
		}
	}
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dIn  The input Data event to be processed by this Analytic
	 * 
	 *  @private
	 */
	action processData(Data dataIn) {
		log "Processing " + dataIn.toString() at DEBUG;
		if(dataIn.streamName = _inputChannelCat) {
			//add/update product categoryId to dictionary 
			_productCategories.add(dataIn.sourceId, dataIn.sValue);
			log _productCategories.toString();
		}
		if(dataIn.streamName = _inputChannel) {
			//send this data to Sum
			Data dataOut := dataIn.clone();
			dataOut.streamName := CHANNEL_PREFIX+"_SUM_"+_inputChannel;
			if(not _productCategories.hasKey(dataIn.sourceId)) {
				if(not _ignoreUnknown ) {
					dataOut.sourceId := UNKNOWN_CATEGORY;
					send dataOut to dataOut.streamName;
				}
			} else {
				dataOut.sourceId := _productCategories[dataIn.sourceId];
				send dataOut to dataOut.streamName;
			}
			
		}	
		
	}
	
	/**
	 *  Optional action to reset the state of the Analytic instance
	 *  back to its initialisation state.
	 *  If the application has created this Analytic using the 
	 *  #init() action directly, then the <font face="courier" size="-1">reset</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @private
	 */
	action reset() {
		// Reset all the analytics
		_sumAnalyticInterface.reset();
	}
	
	/**
	 *  Optional action that is called on deleting the Analytic
	 *  instance. This action should clear any local state/listeners
	 *  that have been created by the Analytic instance.
	 *  This is called internally by the Analytic Object, and  
	 *  should not be called directly by the Users application.
	 *
	 *  @private
	 */
	action onDelete() {
		// Stop all the internally created Analytic interfaces
		_sumAnalyticInterface.stop();

	}
	
}

/** 
*  This internal Monitor is used to automatically intern 
*  any string constants that are defined that are associated
*  with the CategoryContribution Analytic in order to improve  
*  performance when handling strings.
*
*  Note: The listener that is created is required in order
*        to keep the monitor alive between a Persistant  
*        Correlators recovery.  Otherwise, this would be a 
*        transient monitor, and it would not be recovered.  
*        Which would then mean that the strings would not
*        interned in the recovered Correlator.
*
*  @private
*/
monitor InternCategoryContributionChannel {
	event StayAlive {}
	
	action onload() {
		string discard := CategoryContribution.NAME.intern();
		discard := CategoryContribution.BY_SOURCE_ID.intern();
		discard := CategoryContribution.CALCULATION_TYPE.intern();
		discard := CategoryContribution.CALCULATION_VALUE.intern();
		discard := CategoryContribution.CHANNEL_PREFIX.intern();
		discard := CategoryContribution.UNKNOWN_CATEGORY.intern();
		discard := CategoryContribution.SMOOTHING_FACTOR.intern();
		discard := CategoryContribution.TIMEWINDOW.intern();
		discard := CategoryContribution.IGNORE_UNKNOWN.intern();
		on all StayAlive() {}
	}
}
