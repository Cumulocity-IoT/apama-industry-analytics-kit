//*****************************************************************************
// Title:         AnalyticTest
//*****************************************************************************

package com.industry.analytics.Analytic_cor_003;
using com.industry.analytics.Analytic;

monitor AnalyticTest
{
	action onload() {
		// Create a new Analyticer
		Analytic c := Analytic("Test", ["Input1", "Input2"],
										 ["Output1", "Output2"],
										 {"boolean_param":"true",
										  "decimal_param":"1.0",
										  "float_param":"2.0",
										  "integer_param":"3",
										  "string_param":"a_string"});
		
		// Validate the set of parameters
		// Using valid names and types - SHOULD PASS
		boolean result := c.validateParams("Test", -1, -1, 
		                                   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
		                                   ["boolean", "decimal", "float", "integer", "string"],
		                                   [true, true, true, true, true]);
		log "TEST 1: " + result.toString() at INFO;

		// Using valid names, but invalid types - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["a", "b", "c", "d", "e"],
								   [true, true, true, true, true]);
		log "TEST 2: " + result.toString() at INFO;

		// Using valid names, but invalid types (should be lowercase) - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["BOOLEAN", "DECIMAL", "FLOAT", "INTEGER", "STRING"],
								   [true, true, true, true, true]);
		log "TEST 3: " + result.toString() at INFO;

		// Using valid names, but invalid types (should be lowercase) - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["Boolean", "Decimal", "Float", "Integer", "String"],
								   [true, true, true, true, true]);
		log "TEST 4: " + result.toString() at INFO;

	
		// Using valid names, but mismatched types - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["integer", "boolean", "boolean", "boolean", "boolean"],
								   [true, true, true, true, true]);
		log "TEST 5: " + result.toString() at INFO;
		
		// Using valid names, but invalid types, but non-mandatory values - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["a", "b", "c", "d", "e"],
								   [false, false, false, false, false]);
		log "TEST 6: " + result.toString() at INFO;
		
		// Using valid names, but invalid types (should be lowercase) - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["BOOLEAN", "DECIMAL", "FLOAT", "INTEGER", "STRING"],
								   [true, true, true, true, true]);
		log "TEST 7: " + result.toString() at INFO;

		// Using valid names, but invalid types (should be lowercase) - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["Boolean", "Decimal", "Float", "Integer", "String"],
								   [true, true, true, true, true]);
		log "TEST 8: " + result.toString() at INFO;

		// Using valid names, but mismatched types, but non-mandatory values - SHOULD FAIL
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["integer", "boolean", "boolean", "boolean", "boolean"],
								   [false, false, false, false, false]);
		log "TEST 9: " + result.toString() at INFO;
		
		// Using valid names and types, but non-mandatory values - SHOULD PASS
		result := c.validateParams("Test", -1, -1, 
								   ["boolean_param", "decimal_param", "float_param", "integer_param", "string_param"],
								   ["boolean", "decimal", "float", "integer", "string"],
								   [false, false, false, false, false]);
		log "TEST 10: " + result.toString() at INFO;

	}
}
