//*****************************************************************************
// Title: LifecycleDummy Analyticer implementation
//
// Copyright (c) 2015-2017 Software AG, Darmstadt, Germany and/or its licensors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.analytics;

/**
 *  The Delta Analyticer calculates a new Data event from the difference 
 *  between the value on the current Data and the value on the previously 
 *  received Data.
 * 
 *  <dl><dt><b>Input Data events:</b></dt>
 *  <dd>Only a single input Data stream name must be provided.</dd>
 *  </dl>
 *  <dl><dt><b>Output Data events:</b></dt>
 *  <dd>Only a single output Data stream name must be provided. All the
 *      <font face="courier" size="-1">params</font> from the input Data are copied to the delta Data.</dd>
 *  </dl>
 *  <dl><dt><b>Params:</b></dt>
 *  <dd>
 *  <table border="1" style="border-collapse: collapse;width:100%">
 *  <tr><th>Param Name</th><th>Description</th><th>Valid Values</th><th>Data Type</th><th>Required</th><th>Default Value</th></tr>
 *  </table></dd>
 *  </dl>
 */
event LifecycleDummy
{
	/** This constant defines the name of the Analyticer. */
	constant string NAME := "LifecycleDummy";
	
	// Algo specific variables
	Analytic _config;

	/** The Analyticer Base Object implementation 
	 *  @private */
	AnalyticObject _analyticObject;
	

	/** 
	 *  This action creates a new instance of the Analyticer.
	 *  Typically, this is called internally by the associated Analytics 
	 *  service monitor when a com.industry.analytics.Analytic event is 
	 *  sent for this type of Analyticer.
	 *
	 *  @param  config        The Analyticer configuration that 
	 *                        will be used for this instance
	 *  @param  initComplete  The action callback to call when the new Analyticer  
	 *                        has been created, or if an error occured.
     *
	 *  @see com.industry.analytics.Analytic           The Analyticer configuration event object.
	 *  @see com.industry.analytics.AnalyticInterface  The action interface that can be used 
	 *                                            to interact with the Analyticer.
	 */
	action init(Analytic config,
	            action<boolean, AnalyticInterface> initComplete)
	{
		log "Initialising: " + config.toString() at INFO;
		if not _validateConfiguration(config) then
		{
			initComplete(false, new AnalyticInterface);
			return;
		}
		
		_analyticObject := new AnalyticObject;
		_analyticObject.initExtended(config,
		                      processData,
		                      processDataStream,
		                      false,
		                      reset,
		                      _onDelete,
		                      initComplete);
	}
	
	
	/** 
	 *  This helper action validates configuration that was
	 *  used when trying to create a new instance of the Analyticer.
	 *  This is called internally, and should not be called directly by 
	 *  the Users application.
	 *  
	 *  @param   config  The Analyticer configuration object that is being validated
	 *  @returns A boolean value indicating whether the configuration was valid or not.
	 * 
	 *  @private
	 */
	action _validateConfiguration(Analytic config) returns boolean
	{
		// Let the test do whatever it wants.
		log "Validating Configuration." at INFO;
		_config := config;
		return true;
	}
	
	
	/**
	 *  This action implements the Analytic function itself. 
	 *  This is called internally by the Analyticer Object, and  
	 *  should not be called directly by the Users application.
	 *  If the application has created this Analyticer using the 
	 *  #init() action directly, then the <font face="courier" size="-1">processData</font>
	 *  action on the <font face="courier" size="-1">com.industry.analytics.AnalyticInterface</font> 
	 *  that was returned should be used instead.
	 *
	 *  @param   dataIn  The input Data event to be processed by this Analyticer
	 * 
	 *  @private
	 */
	action processData(Data dataIn)
	{
		log "Processing " + dataIn.toString() at DEBUG;
		
		if _config.outputDataNames.size() > 0 then
		{
			Data dataOut := dataIn.clone();
			dataOut.streamName := _config.outputDataNames[0];
			dataOut.type := DataConstants.COMPUTED;
			_analyticObject.sendData(dataOut);
		}
	}
	
	
	action processDataStream(dictionary<string, Data> dataValues)
	{
		log "Processing: " + dataValues.toString() at DEBUG;
	}
	
	
	action reset()
	{
		log NAME + " Analytic reset()." at INFO;
	}
	
	
	action _onDelete()
	{
		log NAME + " Analytic onDelete()." at INFO;
	}
}



/** 
 *  This internal Monitor is used to automatically intern 
 *  any string constants that are defined that are associated
 *  with the Delta Analyticer in order to improve  
 *  performance when handling strings.
 *
 *  Note: The listener that is created is required in order
 *        to keep the monitor alive between a Persistant  
 *        Correlators recovery.  Otherwise, this would be a 
 *        transient monitor, and it would not be recovered.  
 *        Which would then mean that the strings would not
 *        interned in the recovered Correlator.
 *
 *  @private
 */
monitor InternLifecycleDummy {
	event StayAlive {}
	
	action onload()	{
		string discard := LifecycleDummy.NAME.intern();
		on all StayAlive() {}
	}
}
