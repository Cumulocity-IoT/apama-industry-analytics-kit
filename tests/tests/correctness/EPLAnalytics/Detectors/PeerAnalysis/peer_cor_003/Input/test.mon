//*****************************************************************************
// Title:         PeerAnalysis test
//*****************************************************************************

package com.industry.analytics.detectors.PeerAnalysis_cor_003;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.detectors.PeerAnalysis;
using com.industry.analytics.streaming_calculations.Average;
using com.industry.analytics.streaming_calculations.Spread;
using com.industry.analytics.detectors.Threshold;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload() {

		// Create the PeerAnalysis - Test using minimal parameters
		(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, 
																  [ "Input1" ], 
																  [ "Output1" ], 
																  { Threshold.THRESHOLD : "10.0" } ), 
								 initComplete );

		// Test minimal params with empty BY_SOURCEID value - Should fail
		on NextTest( testNum=2 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=3 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "  " } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=4 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "foobar" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=5 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "[]" } ), 
									 initComplete );
		}		
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=6 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "[true]" } ), 
									 initComplete );
		}		

		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=7 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "{}" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=8 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "1.0" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=9 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "0.0" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail
		on NextTest( testNum=10 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "-1.0" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=11 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "true" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=12 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "TRUE" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=13 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "True" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=14 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "  true" } ), 
									 initComplete );
		}

		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=15 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "true  " } ), 
									 initComplete );
		}

		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=16 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "false" } ), 
									 initComplete );
		}
				
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=17 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "FALSE" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=18 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "False" } ), 
									 initComplete );
		}
		
		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=19 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "  false" } ), 
									 initComplete );
		}

		// Test minimal params with invalid BY_SOURCEID value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=20 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		Spread.BY_SOURCEID : "false  " } ), 
									 initComplete );
		}
		// Test minimal params with uppercase BY_SOURCEID name - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=21 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		"BYSOURCEID" : "true" } ), 
									 initComplete );
		}
		
		// Test minimal params with lowercase BY_SOURCEID name - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=22 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		"bysourceid" : "true" } ), 
									 initComplete );
		}
		
		// Test minimal params with valid BY_SOURCEID name and value - Should fail - BySourceId is valid in the Spread, but not in Peer-Analysis as a whole
		on NextTest( testNum=23 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	  { Threshold.THRESHOLD : "10.0",
																		"bySourceId" : "true" } ), 
									 initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
