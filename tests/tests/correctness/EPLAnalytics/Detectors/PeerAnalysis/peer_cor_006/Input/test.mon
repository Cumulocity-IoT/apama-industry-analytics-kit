//*****************************************************************************
// Title:         PeerAnalysis test
//*****************************************************************************

package com.industry.analytics.detectors.PeerAnalysis_cor_006;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.detectors.PeerAnalysis;
using com.industry.analytics.streaming_calculations.Average;
using com.industry.analytics.streaming_calculations.Spread;
using com.industry.analytics.detectors.Threshold;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload() {
		// Create the Threshold - with valid values should pass
		(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																{ Threshold.THRESHOLD : "1.0",
																  Threshold.REPEATS   : "1" } ), 
									initComplete );

		// Test minimal params with empty REPEATS value - Should fail
		on NextTest( testNum=2 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "" } ), 
										initComplete );
		}
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=3 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "  " } ), 
										initComplete );
		}
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=4 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "foobar" } ), 
										initComplete );
		}
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=5 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "[]" } ), 
										initComplete );
		}		
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=6 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "[1.0]" } ), 
										initComplete );
		}		

		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=7 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "{}" } ), 
										initComplete );
		}
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=8 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "0.0" } ), 
										initComplete );
		}
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=9 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "-1.0" } ), 
										initComplete );
		}
		
		// Test minimal params with valid REPEATS value - Should pass
		on NextTest( testNum=10 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "0" } ), 
										initComplete );
		}
		
		// Test minimal params with invalid REPEATS value - Should fail
		on NextTest( testNum=11 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "-1" } ), 
										initComplete );
		}
		
		// Test minimal params with valid REPEATS value - Should pass
		on NextTest( testNum=12 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  Threshold.REPEATS   : "10" } ), 
										initComplete );
		}

		// Test minimal params with uppercase REPEATS name - Should pass as the param name is case-insensitive
		on NextTest( testNum=13 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  "REPEATS" : "1" } ), 
										initComplete );
		}
		
		// Test minimal params with mixed case REPEATS name - Should pass as the param name is case-insensitive
		on NextTest( testNum=14 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  "Repeats" : "1" } ), 
										initComplete );
		}
		
		// Test minimal params with lowercase REPEATS name and value - Should pass as the param name is case-insensitive
		on NextTest( testNum=15 ) { 
			(new PeerAnalysis).init( com.industry.analytics.Analytic( PeerAnalysis.NAME, [ "Input1" ], [ "Output1" ], 
																	{ Threshold.THRESHOLD : "1.0",
																	  "repeats" : "1" } ), 
										initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
