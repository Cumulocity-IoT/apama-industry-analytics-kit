//*****************************************************************************
// Title:         MemoryStore test
//*****************************************************************************

package com.industry.analytics.utilities.MemoryStore_cor_007;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.utilities.MemoryStore;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload()	{		
		// Create the MemoryStore - with valid values should pass
		(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
														   [ "Input1" ], 
														   new sequence<string>, 
		 												   new dictionary<string,string> ), 
		                       initComplete );

		// Test minimal params with empty TABLE_NAME value - Should fail
		on NextTest( testNum=2 ) { 
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { MemoryStore.TABLE_NAME : "" } ), 
								   initComplete );
		}
		
		// Test minimal params with invalid TABLE_NAME value - Should fail
		on NextTest( testNum=3 ) { 
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { MemoryStore.TABLE_NAME : "  " } ), 
								   initComplete );
		}
		
		// Test minimal params with TABLE_NAME value with spaces in - Should pass as the spaces will be removed
		on NextTest( testNum=4 ) { 
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { MemoryStore.TABLE_NAME : "  MYTABLE" } ), 
								   initComplete );
		}
		
		// Test minimal params with TABLE_NAME value - Should pass as the spaces will be removed
		on NextTest( testNum=5 ) { 
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { MemoryStore.TABLE_NAME : "MYTABLE  " } ), 
								   initComplete );
		}		
		
		// Test minimal params with TABLE_NAME value - Should pass as the spaces will be removed
		on NextTest( testNum=6 ) { 
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { MemoryStore.TABLE_NAME : "  MYTABLE  " } ), 
								   initComplete );
		}
		
	
		// Test minimal params with invalid TABLE_NAME name - Should pass as the param name is unrecognised and not mandatory
		on NextTest( testNum=7 ) {
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { "NAME" : "MYTABLE" } ), 
								   initComplete );
		}

		// Test minimal params with invalid TABLE_NAME name - Should pass as the param name is unrecognised and not mandatory 
		on NextTest( testNum=8 ) {
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { "Name" : "MYTABLE" } ), 
								   initComplete );
		}

		// Test full params - Valid TABLE_NAME name and value - Should pass
		on NextTest( testNum=9 ) {
			(new MemoryStore).init( com.industry.analytics.Analytic( MemoryStore.NAME, 
															   [ "Input1" ], 
															   new sequence<string>, 
															   { "name" : "MYTABLE" } ), 
								   initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
