//*****************************************************************************
// Title:         Expression test
//*****************************************************************************

package com.industry.analytics.streaming_calculations.Expression_cor_003;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.streaming_calculations.Expression;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload()	{		
		// Create the Expression - Zero input should fail
		(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
		                                              new sequence<string>, 
		 		                                      [ "Output1" ], 
													  new dictionary<string,string> ), 
		                       initComplete );

		// Create the Expression - Single input/output - should fail due to required param
		on NextTest( testNum=2 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Check more than one input fails
		on NextTest( testNum=3 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1", "Input2" ], 
														  [ "Output1" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Empty name for input should fail
		on NextTest( testNum=4 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "" ], 
														  [ "Output1" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - blank name for input should fail
		on NextTest( testNum=5 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "  " ], 
														  [ "Output1" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Check more than one output fails
		on NextTest( testNum=6 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "Output1", "Output2" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Check zero output fails
		on NextTest( testNum=7 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  new sequence<string>, 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Empty name for output should fail
		on NextTest( testNum=8 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - blank name for output should fail
		on NextTest( testNum=9 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "  " ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Check no inputs or outputs fails
		on NextTest( testNum=10 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  new sequence<string>, 
														  new sequence<string>, 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression - Check two inputs/outputs - should fail
		on NextTest( testNum=11 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1", "Input2" ], 
														  [ "Output1", "Output2" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
	
		// Create the Expression - Check four inputs/outputs - should fail
		on NextTest( testNum=12 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1", "Input2", "Input3", "Input4" ], 
														  [ "Output1", "Output2", "Output3", "Output4" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Expression - Check null value for Analytic name fails
		on NextTest( testNum=13 ) { 
			(new Expression).init( com.industry.analytics.Analytic( "", 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression- with invalid Analytic name fails
		on NextTest( testNum=14 ) { 
			(new Expression).init( com.industry.analytics.Analytic( "foobar", 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Expression = with different case for Analytic name - fails as the service looks for lower and normal values
		on NextTest( testNum=15 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME.toUpper(), 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  { "expression":"1+1"}  ), 
								   initComplete );
		}

		// Create the Expression- with different case for Analytic name passes
		on NextTest( testNum=16 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME.toLower(), 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  { "expression":"1+1"}  ), 
								   initComplete );
		}
		
		// Create the Expression - with different case forrequired configuration values should pass
		on NextTest( testNum=17 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  { "EXPRESSION":"1+1"} ), 
								   initComplete );
		}
		
		// Create the Expression - with different case forrequired configuration values should pass
		on NextTest( testNum=18 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  { "ExPrEsSiOn":"1+1"} ), 
								   initComplete );
		}
		
		// Create the Expression - with different case forrequired configuration values should pass
		on NextTest( testNum=19 ) { 
			(new Expression).init( com.industry.analytics.Analytic( Expression.NAME, 
														  [ "Input1" ], 
														  [ "Output1" ], 
														  { "expression":"1+1"} ), 
								   initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
