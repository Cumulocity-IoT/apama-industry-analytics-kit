//*****************************************************************************
// Title:         Combiner test
//*****************************************************************************

package com.industry.analytics.flow_manipulation.Combiner_cor_003;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.flow_manipulation.Combiner;


event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload()	{		
		// Create the Combiner - Zero input should fail
		(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
		                                                   new sequence<string>, 
		 		                                           [ "Output1" ], 
		 												   new dictionary<string,string> ), 
		                       initComplete );

		// Create the Combiner - Single input should pass
		on NextTest( testNum=2 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1" ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - Empty name for input should fail
		on NextTest( testNum=3 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "" ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - blank name for input should fail
		on NextTest( testNum=4 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "  " ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - Check more than one output fails
		on NextTest( testNum=5 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   [ "Output1", "Output2" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - Check zero output fails
		on NextTest( testNum=6 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   new sequence<string>, 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - Empty name for output should fail
		on NextTest( testNum=7 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   [ "" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - blank name for output should fail
		on NextTest( testNum=8 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   [ "  " ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - Check null value for Analytic name fails
		on NextTest( testNum=9 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( "", 
															   [ "Input1", "Input2" ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
 		}

		// Create the Combiner - with invalid Analytic name fails
		on NextTest( testNum=10 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( "foobar", 
															   [ "Input1", "Input2" ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Combiner - with invalid case for Analytic name fails
		on NextTest( testNum=11 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( "COMBINER", 
															   [ "Input1", "Input2" ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Combiner - Check null value for optional param fails
		on NextTest( testNum=12 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   [ "Output1" ], 
															   { Combiner.AGGREGATED_SOURCEID:"" } ), 
								   initComplete );
		}
		
		// Create the Combiner - Check null value for optional param fails
		on NextTest( testNum=13 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   [ "Output1" ], 
															   { Combiner.AGGREGATED_SOURCEID:"  " } ), 
								   initComplete );
		}
		
		// Test with AGGREGATED_SOURCEID name as a param with the wrong case - Should pass as the param name is unrecognised and will be ignored
		on NextTest( testNum=14 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, [ "Input1", "Input2" ], [ "Output1" ], 
																{ "AGGREGATEDSOURCEID" : "foobar" } ), 
									initComplete );
		}
		
		// Test with AGGREGATED_SOURCEID name as a param with the wrong case - Should pass as the param name is unrecognised and will be ignored
		on NextTest( testNum=15 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, [ "Input1", "Input2" ], [ "Output1" ], 
																{ "aggregatedsourceid" : "foobar" } ), 
									initComplete );
		}

		// Test with AGGREGATED_SOURCEID name as a param - Should pass
		on NextTest( testNum=16 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, [ "Input1", "Input2" ], [ "Output1" ], 
																{ Combiner.AGGREGATED_SOURCEID:"aggregatedId" } ), 
									initComplete );
		}
		
		// Create the Combiner - with valid values should pass
		on NextTest( testNum=17 ) { 
			(new Combiner).init( com.industry.analytics.Analytic( Combiner.NAME, 
															   [ "Input1", "Input2" ], 
															   [ "Output1" ], 
															   new dictionary<string,string> ), 
								   initComplete );
	
			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
