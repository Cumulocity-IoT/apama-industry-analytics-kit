//*****************************************************************************
// Title:         Filter test
//*****************************************************************************

package com.industry.analytics.flow_manipulation.Filter_cor_004;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.flow_manipulation.Filter;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload()	{		
		// Create the Filter - Zero input should fail
		(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
													   new sequence<string>, 
													   [ "Output1" ], 
													   new dictionary<string,string> ), 
		                       initComplete );

		// Create the Filter - Single input and output should pass
		on NextTest( testNum=2 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1" ], 
														   [ "Output1" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - Check more than one input - should fail
		on NextTest( testNum=3 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1",  "Input2" ], 
														   [ "Output1"  ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - Check more than one outputs - should fail
		on NextTest( testNum=4 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1" ], 
														   [ "Output1", "Output2" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - Empty name for input should fail
		on NextTest( testNum=5 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "" ], 
														   [ "Output1" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - blank name for input should fail
		on NextTest( testNum=6 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "  " ], 
														   [ "Output1" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - Check with multiple inputs and outputs - should fail
		on NextTest( testNum=7 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1", "Input2" ], 
														   [ "Output1", "Output2" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}

		// Create the Filter - Check no inputs or outputs fails
		on NextTest( testNum=8 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   new sequence<string>, 
														   new sequence<string>, 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		

	
		// Create the Filter - Check zero output fails
		on NextTest( testNum=9 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1" ], 
														   new sequence<string>, 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - Empty name for output should fail
		on NextTest( testNum=10 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1" ], 
														   [ "" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - blank name for output should fail
		on NextTest( testNum=11 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1" ], 
														   [ "  " ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - Check null value for Analytic name fails
		on NextTest( testNum=12 ) { 
			(new Filter).init( com.industry.analytics.Analytic( "", 
														   [ "Input1" ], 
														   [ "Output1" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - with invalid Analytic name fails
		on NextTest( testNum=13 ) { 
			(new Filter).init( com.industry.analytics.Analytic( "foobar", 
														   [ "Input1" ], 
														   [ "Output1" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - with invalid case for Analytic name fails
		on NextTest( testNum=14 ) { 
			(new Filter).init( com.industry.analytics.Analytic( "FILTER", 
														   [ "Input1" ], 
														   [ "Output1" ], 
														   new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Filter - with configuration values should pass
		on NextTest( testNum=15 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, 
														   [ "Input1" ], 
														   [ "Output1" ], 
														   { Filter.TYPE                : "[]",
															 Filter.NOT_TYPE            : "[]",
															 Filter.SOURCEID            : "[]",
															 Filter.NOT_SOURCEID        : "[]",
															 Filter.HASPARAM            : "[]",
															 Filter.NOT_HASPARAM        : "[]",
															 Filter.SVALUE         : "[]",
															 Filter.NOT_SVALUE     : "[]",
															 Filter.SOURCEID_ONLYLEAFNODES : "[]",
															 Filter.SOURCEID_ALLCHILDREN : "[]" } ), 
								   initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
