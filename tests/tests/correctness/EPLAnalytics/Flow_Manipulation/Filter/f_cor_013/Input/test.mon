//*****************************************************************************
// Title:         Filter test
//*****************************************************************************

package com.industry.analytics.flow_manipulation.Filter_cor_013;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.flow_manipulation.Filter;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload()	{		
		// Create the Filter - with valid values should pass
		(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
		 											  { Filter.SOURCEID_ONLYLEAFNODES : "[\"a\",\"c\"]" } ), 
							initComplete );

		// Test minimal params with empty SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=2 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "" } ), 
								initComplete );
		}
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=3 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "  " } ), 
								initComplete );
		}
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=4 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "123" } ), 
								initComplete );
		}
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=5 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "-123" } ), 
								initComplete );
		}		
				
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=6 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "foobar" } ), 
								initComplete );
		}

		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=7 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "{}" } ), 
								initComplete );
		}
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=8 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "{\"a\":\"1\",\"c\":\"1\"}" } ), 
								initComplete );
		}		
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=9 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "[1,2" } ), 
								initComplete );
		}

		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=10 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "]" } ), 
								initComplete );
		}
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=11 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "[\"a\",\"c\"" } ), 
								initComplete );
		}
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES value - Should fail
		on NextTest( testNum=12 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "[\"a\",1" } ), 
								initComplete );
		}
		
		// Test minimal params with valid (but empty) SOURCEID_ONLYLEAFNODES value - Should pass
		on NextTest( testNum=13 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { Filter.SOURCEID_ONLYLEAFNODES : "[]" } ), 
								initComplete );
		}

		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES name - Should pass as the param name is unrecognised and not mandatory
		on NextTest( testNum=14 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { "SOURCEID_ONLYLEAFNODES" : "[]" } ), 
								initComplete );
		}
		
		// Test minimal params with invalid SOURCEID_ONLYLEAFNODES name - Should pass as the param name is unrecognised and not mandatory
		on NextTest( testNum=15 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { "sourceid_onlyleafnodes" : "[]" } ), 
								initComplete );
		}
		
		// Test minimal params with valid SOURCEID_ONLYLEAFNODES name and value - Should pass
		on NextTest( testNum=16 ) { 
			(new Filter).init( com.industry.analytics.Analytic( Filter.NAME, [ "Input1" ], [ "Output1" ], 
														  { "sourceId_OnlyLeafNodes" : "[]" } ), 
								initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
