//*****************************************************************************
// Title:         Suppressor test
//*****************************************************************************

package com.industry.analytics.flow_manipulation.Suppressor_cor_007;

using com.industry.analytics.Analytic;
using com.industry.analytics.AnalyticInterface;
using com.industry.analytics.flow_manipulation.Suppressor;

event NextTest {
	integer testNum;
}

monitor Test {
	integer testNum := 1;
	
	action onload()	{		
		// Create the Suppressor - Zero input should fail
		(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
														new sequence<string>, 
														[ "Output1" ], 
														{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
		                       initComplete );

		// Create the Suppressor - Single input should pass
		on NextTest( testNum=2 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1" ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check more than one input less outputs - should fail
		on NextTest( testNum=3 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1",  "Input2" ], 
															[ "Output1"  ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check more than one input with more outputs - should fail
		on NextTest( testNum=4 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1",  "Input2" ], 
															[ "Output1", "Output2", "Output3"  ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Empty name for input should fail
		on NextTest( testNum=5 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "" ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - blank name for input should fail
		on NextTest( testNum=6 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "  " ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check more than one output with less inputs - should fail
		on NextTest( testNum=7 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															 [ "Input1" ], 
															 [ "Output1", "Output2" ], 
															 { Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check more than one output with more inputs - should fail
		on NextTest( testNum=8 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1", "Input2", "Input3" ], 
															[ "Output1", "Output2" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check zero output fails
		on NextTest( testNum=9 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															 [ "Input1" ], 
															 new sequence<string>, 
															 { Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check no inputs or outputs fails
		on NextTest( testNum=10 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															new sequence<string>, 
															new sequence<string>, 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check two inputs/outputs - should fail
		on NextTest( testNum=11 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1", "Input2" ], 
															[ "Output1", "Output2" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
	
		// Create the Suppressor - Check four inputs/outputs - should fail
		on NextTest( testNum=12 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1", "Input2", "Input3", "Input4" ], 
															[ "Output1", "Output2", "Output3", "Output4" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Empty name for output should fail
		on NextTest( testNum=13 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1" ], 
															[ "" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - blank name for output should fail
		on NextTest( testNum=14 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1" ], 
															[ "  " ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - Check null value for Analytic name fails
		on NextTest( testNum=15 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( "", 
															[ "Input1" ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - with invalid Analytic name fails
		on NextTest( testNum=16 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( "foobar", 
															[ "Input1" ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - with invalid case for Analytic name fails
		on NextTest( testNum=17 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( "SUPPRESSOR", 
															[ "Input1" ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM  : "triggerParamName" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - with missing mandatory configuration values should fail
		on NextTest( testNum=18 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1" ], 
															[ "Output1" ], 
															new dictionary<string,string> ), 
								   initComplete );
		}
		
		// Create the Suppressor - with missing mandatory configuration values should fail
		on NextTest( testNum=19 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1" ], 
															[ "Output1" ], 
															{ Suppressor.TIMEWINDOW : "1.0" } ), 
								   initComplete );
		}
		
		// Create the Suppressor - with configuration values should pass
		on NextTest( testNum=20 ) { 
			(new Suppressor).init( com.industry.analytics.Analytic( Suppressor.NAME, 
															[ "Input1" ], 
															[ "Output1" ], 
															{ Suppressor.TRIGGER_PARAM       : "triggerParamName",
															  Suppressor.TRIGGER_PARAM_VALUE : "triggerParamVal",
															  Suppressor.TRIGGER_EXTENSION   : "true",
															  Suppressor.ACTION_PARAM        : "actionParamName",
															  Suppressor.ACTION_PARAM_VALUE  : "actionParamVal",
															  Suppressor.RESET_PARAM         : "resetParamName",
															  Suppressor.RESET_PARAM_VALUE   : "resetParamVal",
															  Suppressor.BY_SOURCEID         : "true",
															  Suppressor.TIMEWINDOW          : "1.0" } ), 
								   initComplete );

			// Log that we have completed the test
			log "TEST COMPLETE";
		}
	}
	
	action initComplete( boolean success, AnalyticInterface ti ) {
		
		if( success ) then {
			log "TEST PASSED: "+testNum.toString();
		} else {
			log "FAILED TO CREATE ANALYTIC: "+testNum.toString() at ERROR; 
		}
		
		// Increment the test number
		testNum := testNum+1; 
		
		// Send the next step event
		route NextTest( testNum );
    }
}
